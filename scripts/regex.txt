
https://www.ibm.com/developerworks/cn/aix/library/au-speakingunix9/index.html

可以找到文本之后将其提取出来
如果希望将需要的文本与其他内容分开，请使用圆括号将模式括起来。
perl -n -e '/^The\s+(.*)$/ && print "$1\n"' regextest.txt
perl -e 可以直接从命令行运行 Perl 程序。perl -n 命令针对输入文件的每一行运行一次程序

JS
https://www.youtube.com/watch?v=rCd8zdnWMgk&index=1&list=PLE9ZEcjJ_gTVgCt6CmvMcez1hwqk5Cxou

1. search, match, replace 使用正则
    var str = "abc 0123"
    var re = /\d/

    str.search(re) 查找第一个出现的匹配

    var re = /\d/g
    str.match(re)  有g会匹配所有，没g只匹配第一个，返回数组

    var re = /\d+/g  + 量词
    str.replace(re, "a")

2.
    []  [abc] 任选一个
    var re = /<[^<>]+>/g  html标签
    .    任意字符
    \d [0-9]
    \D [^0-9]
    \w  [a-z0-9_]
    \W [^a-z0-9_]
    \s  空白字符
    \S  非空白字符
    () 子表达式

    量词(重复修饰符) {}
    {n, m}
    {n,} 至少n次
    {n}  正好n次
    *    任意次 {0,}  不建议使用
    ?   零次或一次 {0,1}
    +   一次或任意次{1,}

    ^
    $
    ^$在起始与结尾具有特殊用处


3. 贪婪属性

Python


Shell


shell中的特殊字符：  需要 反斜杠转义
    #：注释字符
    \：将特殊字符或者通配符还原成一般字符
    |：管道符，分割两个管线命令的界定
    ;：连续命令下达分隔符
    ~：用户的家目录
    $：放在变量前面，正确使用变量
    &：工作控制，将命令编程背景下工作
    !：非(!)的意思，逻辑运算符
    >,>>：输出重定向，分别是覆盖和追加
    <,<<：输入重定向
    ‘’：单引号，不具有变量置换的功能
    “”：双引号，具有变量置换的功能
    ()：在中间的为子 shell 的起始与结束
    {}：在中间为命令块的组合


grep 特殊字符都要加反斜杠
    grep "\(TVGuor\)\+\|\(Foundation\)\+" crash.txt  #包含TVGuor 或 Foundation 的行
    grep "\(UIKit\)\+" crash.txt
    grep "[sU]Foundation\+" crash.txt   #[ 不是特殊字符
    grep "\[.*\]" crash.txt   \[ 表示原字符，#此命令查找[]和其中任意内容
    -i 匹配大小写
    -w匹配整个单词
    -v 排除匹配行

awk
http://www.zsythink.net/archives/tag/awk/

sed 非交互式的编辑器 https://blog.csdn.net/gua___gua/article/details/49304699

定址
    定址用于决定对哪些行进行编辑。地址的形式可以是数字、正则表达式、或二者的结合。如果没有指定地址，sed将处理输入文件的所有行。

正则
    /9\{5,7\}/   {} 需要反斜杠
    >保存已匹配的字符
        1,20s/self/\1r/  标记元字符之间的模式，并将其保存为标签1，之后可以使用\1来引用它。最多可以定义9个标签，从左边开始编号，最左边的是第一个。此例中，对第1到第20行进行处理，you被保存为标签1，如果发现youself，则替换为your。
    >保存查找串以便在替换串中引用
        s/my/**&**/  符号&代表查找串。my将被替换为**my**
命令
    命令告诉sed如何处理由地址指定的各输入行
    a\  在当前行后添加一行或多行。多行时除最后一行外，每行末尾需用“\”续行
    c\  用此符号后的新文本替换当前行中的文本。多行时除最后一行外，每行末尾需用"\"续行
    i\  在当前行之前插入文本。多行时除最后一行外，每行末尾需用"\"续行
    d   删除行
    h   把模式空间里的内容复制到暂存缓冲区
    H   把模式空间里的内容追加到暂存缓冲区
    g   把暂存缓冲区里的内容复制到模式空间，覆盖原有的内容
    G   把暂存缓冲区的内容追加到模式空间里，追加在原有内容的后面
    l   列出非打印字符
    p   打印行
    n   读入下一输入行，并从下一条命令而不是第一条命令开始对其的处理
    q   结束或退出sed
    r   从文件中读取输入行
    !   对所选行以外的所有行应用命令
    s   用一个字符串替换另一个
    g   在行内进行全局替换
    w   将所选的行写入文件
    x   交换暂存缓冲区与模式空间的内容
    y   将字符替换为另一字符（不能对正则表达式使用y命令）
选项
 -e 进行多项编辑，即对输入行应用多条sed命令时使用
 -n 取消默认的输出
 -f 指定sed脚本的文件名

范例
    sed '/my/p' datafile #默认情况下，sed把所有输入行都打印在标准输出上。如果某行匹配模式my，p命令将把该行另外打印一遍。
    sed -n '/my/p' datafile #选项-n取消sed默认的打印，p命令把匹配模式my的行打印一遍。

    sed '$d' datafile #删除最后一行，其余的都被显示
    sed '/my/d' datafile #删除包含my的行，其余的都被显示

    sed 's/^My/You/g' datafile #命令末端的g表示在行内进行全局替换，也就是说如果某行出现多个My，所有的My都被替换为You。
    sed -n '1,20s/My$/You/gp' datafile #取消默认输出，处理1到20行里匹配以My结尾的行，把行内所有的My替换为You，并打印到屏幕上。
    sed 's#My#Your#g' datafile #紧跟在s命令后的字符就是查找串和替换串之间的分隔符。分隔符默认为正斜杠，但可以改变。无论什么字符（换行符、反斜线除外），只要紧跟s命令，就成了新的串分隔符。

    sed -e '1,10d' -e 's/My/Your/g' datafile
        #选项-e用于进行多重编辑。第一重编辑删除第1-10行。
        第二重编辑将出现的所有My替换为Your。
        因为是逐行进行这两项编辑（即这两个命令都在模式空间的当前行上执行），
        所以编辑命令的顺序会影响结果。
    sed '/My/r introduce.txt' datafile
        #如果在文件datafile的某一行匹配到模式My，
        就在该行后读入文件introduce.txt的内容。
        如果出现My的行不止一行，
        则在出现My的各行后都读入introduce.txt文件的内容。

    a\ 命令是追加命令，追加将添加新文本到文件中当前行（即读入模式缓冲区中的行）的后面。所追加的文本行位于sed命令的下方另起一行。如果要追加的内容超过一行，则每一行都必须以反斜线结束，最后一行除外。最后一行将以引号和文件名结束。
    i\ 命令是在当前行的前面插入新的文本
    c\ 已有文本修改成新的文本
    sed '/^hrwang/a\    # 在此换行
    >hrwang and mjfan are husband\
    >and wife' datafile
    #如果在datafile文件中发现匹配以hrwang开头的行，则在该行下面追加hrwang and mjfan are husband and wife

    n命令 获取输入文件的下一行，并将其读入到模式缓冲区中，任何sed命令都将应用到匹配行紧接着的下一行上。
    sed -n '/^The/{n; p;}' regextest.txt   # 注意大括号里用分号分隔
    注：如果需要使用多条命令，或者需要在某个地址范围内嵌套地址，就必须用花括号将命令括起来，每行只写一条命令，或这用分号分割同一行中的多条命令。


Vim
https://www.jianshu.com/p/3abd6fbc3322
规定正则表达式的元字符必须用反斜杠进行转义才行
magic ：除了$ . * ^ 之外其他元字符都要加反斜杠。
nomagic ：除了 $ ^ 之外其他元字符都要加反斜杠。

* 匹配0个或多个(匹配优先)
\+ 匹配1个或多个(匹配优先)
\?或\= 0个或1个(匹配优先)，\?不能在 ? 命令（逆向查找）中使用
\{n,m} 匹配n个到m个(匹配优先),如\d{1, 3}可以匹配1到3个数字,类似11, 1, 333
\{n,} 最少n个(匹配优先)
\{,m} 最多m个(匹配优先)
\{n} 恰好n个

在正规表达式中使用 \( 和 \) 符号括起正规表达式，即可在后面使用\1、\2等变量来访问 \( 和 \) 中的内容
非贪婪匹配的概念,匹配尽可能少的字符 .*变成.\{-}


Swift & ObjC
