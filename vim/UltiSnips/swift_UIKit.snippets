
#	UI {
snippet viewDidLoad  "Swift - viewDidLoad" b
override func viewDidLoad() {
    super.viewDidLoad()
    ${1:code}
}
endsnippet

snippet viewWillAppear  "Swift - viewWillAppear"
override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    ${1:code}
}
endsnippet

snippet viewDidAppear  "Swift - viewDidAppear"
override func viewDidAppear(_ animated: Bool) {
	super.viewDidAppear(animated)
	${1:code}
}
endsnippet

snippet viewWillDisappear  "Swift - viewWillDisappear"
override func viewWillDisappear(_ animated: Bool) {
	super.viewWillDisappear(animated)
	${1:code}
}
endsnippet

snippet viewDidDisappear  "Swift - viewDidDisappear"
override func viewDidDisappear(_ animated: Bool) {
	super.viewDidDisappear(animated)
	${1:code}
}
endsnippet

snippet imageView  "UIImageView"
let img = UIImage(named: ${2:imgName})
let imageView = UIImageView(image: img)
endsnippet

snippet contentMode "enum ContentMode"
/*
.scaleToFill
.scaleAspectFit // 等比例，全显示，不裁剪
.scaleAspectFill // 等比例，平铺，部分被裁剪
.center // 大小不变，居中
*/
imageView.contentMode = .scaleAspectFit
endsnippet

snippet textField  "Swift - UITextField config"
let textField = UITextField(frame: .zero)
textField.placeholder = "${1:placeholder}"
textField.font = UIFont.systemFont(ofSize: 15)
textField.borderStyle = UITextField.BorderStyle.roundedRect
textField.textAlignment = .left
//textField.delegate = self
textField.autocorrectionType = UITextAutocorrectionType.no
textField.keyboardType = UIKeyboardType.default
textField.returnKeyType = UIReturnKeyType.done
textField.clearButtonMode = UITextField.ViewMode.whileEditing;
textField.contentVerticalAlignment = UIControl.ContentVerticalAlignment.center
endsnippet

snippet textFieldAction "UITextField Action"
textField.addTarget(self, action: #selector(textFieldDidChange), for: .editingChanged)
@objc func textFieldDidChange(sender: UITextField) {
	guard let text = sender.text else { return }
	${1://Code}
}
endsnippet

snippet label  "Swift - label"
let label = UILabel(frame: .zero)
label.textColor = UIColor(hex: 0x666666)
label.text = "${1:text}"

label.textAlignment = .left
label.numberOfLines = 1
label.backgroundColor = .clear
label.font = UIFont.systemFont(ofSize: 16)
endsnippet

snippet button  "Swift - button" b
let button = UIButton(frame: .zero)
button.setTitle("title", for: .normal)
button.setTitleColor(UIColor(hex: 0x666666), for: .normal)
button.backgroundColor = .white
button.addTarget(self, action: #selector(buttonPressed), for: .touchUpInside)

@objc func buttonPressed(sender: UIButton) {
}
endsnippet

#}

snippet djPickerviewdelegate  "Swift-UIPickerViewDelegate"

//MARK: UIPickerViewDelegate
extension ${1:Class} : UIPickerViewDelegate {

    func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        ${2:code}
    }

    func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        ${3:code}
    }

}
endsnippet

snippet djPickerviewdatasource  "Swift-UIPickerViewDataSource"
//MARK: UIPickerViewDataSource
extension ${1:Class} : UIPickerViewDataSource {

    public func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int
        ${2:code}
    }

    public func numberOfComponents(in pickerView: UIPickerView) -> Int
        ${3:code}
    }
}
endsnippet

snippet djCollectionView-Datasource  "Swift-UICollectionViewDataSource"

//MARK: UICollectionViewDataSource
extension ${1:Class} : UICollectionViewDataSource {

    optional public func numberOfSections(in collectionView: UICollectionView) -> Int
        return ${2:numberOfSections}
    }

    public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int
        return ${3:numberOfItems}
    }

    public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ${4:identifier}, for: indexPath) as! ${5:CustomCell}
        ${6:configureCell}
        return cell
    }
}
endsnippet

snippet djCollectionView-Delegate "UICollectionViewDelegate"
extension ${1:Class} : UICollectionViewDataSource {
	func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
	}
}
endsnippet

snippet djTableview-Delegate  "Swift-UITableviewDelegate"
//MARK: UITableViewDelegate
extension ${1:Class} : UITableViewDelegate {
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        ${2:code}
    }
}
endsnippet

snippet djTableviewdatasource  "Swift-UITableviewDataSource"

//MARK: UITableviewDataSource
extension ${1:Class} : UITableViewDataSource {
	public func numberOfSections(in tableView: UITableView) -> Int {
		return ${2:numberOfSections}
	}

	public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		return ${3:numberOfRows}
	}

	public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		if let cell = tableView.dequeueReusableCell(withIdentifier: ${4:identifier}) as? ${5:CustomCell} {
			${6:configCell}
			return cell
		} else {
			return UITableViewCell()
		}
	}
}
endsnippet

snippet view "UIView template"

final class ${1:Subview}: UIView {
	override init(frame: CGRect) {
		super.init(frame: frame)
		initialize()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		initialize()
	}

	convenience init() {
		self.init(frame: .zero)
		initialize()
	}

	private func initialize() {
		${2://code}
	}

	override func layoutSubviews() {
		super.layoutSubviews()
	}

}
endsnippet

snippet viewYoga "yoga template"
class DemoView: UIView {
    let imageView = UIImageView()
    let label = UILabel()
    let button = UIButton()

    override init(frame: CGRect) {
        super.init(frame: frame)

        addSubview(imageView)
        addSubview(label)
        addSubview(button)

        YogaContainerLayout(self)
            .add(imageView.ygRelativeLayout)
            .add(label.ygRelativeLayout)
            .add(button.ygRelativeLayout)
            .row()
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    override func layoutSubviews() {
        super.layoutSubviews()
        yoga.applyLayout(preservingOrigin: true)
    }
}
endsnippet

snippet awakeFromNib "awakeFromNib"
override func awakeFromNib() {
	super.awakeFromNib()
}
endsnippet

snippet loadView "loadView"
override func loadView() {
	super.loadView()
}
endsnippet

snippet layoutSubviews "layoutSubviews"
override func layoutSubviews() {
	super.layoutSubviews()
	// ${1:code}
}
endsnippet

snippet shadow "layer shadow"
// 设置圆角
${1:view}.layer.cornerRadius = 8
$1.layer.borderColor = UIColor(hex: 0xE0E0E0).withAlphaComponent(0.5).cgColor
$1.layer.borderWidth = UIView.onePixel

$1.backgroundColor = .white // 需要不透明背景，否则无阴影
// x轴y轴偏移，用Size很奇怪
$1.layer.shadowOffset = CGSize(width: 0, height: 1)
$1.layer.shadowColor = UIColor(hex: 0xE0E0E0).cgColor
$1.layer.shadowOpacity = 0.5
// 阴影模糊半径
$1.layer.shadowRadius = 5
endsnippet

snippet border "layer border&corner"
${1:view}.layer.cornerRadius = 8
$1.layer.borderColor = UIColor(hex: 0xE0E0E0).withAlphaComponent(0.5).cgColor
$1.layer.borderWidth = UIView.onePixel
$1.backgroundColor = .white
endsnippet

snippet initFrame "init frame"
override init(frame: CGRect) {
	super.init(frame: frame)
	${1:// code}
}

required init?(coder aDecoder: NSCoder) {
	fatalError("init(coder:) has not been implemented")
}

endsnippet

snippet keywindow "keywindow"
UIApplication.shared.keyWindow
endsnippet

snippet ygScrollView "use scrollview with yoga"
    let scrollView = UIScrollView()
    let container = UIView()

    override func loadView() {
        super.loadView()
        self.view.addSubview(scrollView)

		/* use yoga on container subviews here */

        scrollView.addSubview(container)
	}

    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        scrollView.frame = self.view.bounds

		// calc container real height
        container.frame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 0)
        container.yoga.applyLayout(preservingOrigin: true, dimensionFlexibility: .flexibleHeight)

		// contentSize larger then scrollview frame, then scroll will be enabled
        if container.frame.height > scrollView.frame.height {
            scrollView.contentSize = container.frame.size
        } else {
            scrollView.contentSize = CGSize(width: self.view.bounds.width, height: self.view.bounds.height + 1)
        }
    }
endsnippet

snippet ygView "use YGView"
final class ${0:CustomView}: YGView {
	override func initialize() {

	}
}
endsnippet

snippet autoExapndYGView
endsnippet


snippet hitTest "custom hitTest method"
override func hitTest(_ point: CGPoint, with event: UIEvent?) -> UIView? {
	
	guard isUserInteractionEnabled else { return nil }
	
	guard !isHidden else { return nil }
	
	guard alpha >= 0.01 else { return nil }
	
	guard self.point(inside: point, with: event) else { return nil }
	
	for subview in subviews.reversed() {
		let convertedPoint = subview.convert(point, from: self)
		if let candidate = subview.hitTest(convertedPoint, with: event) {
			return candidate
		}
	}
	return self
}
endsnippet
