########## { Reactive Native Template file } ##########

# 1
snippet copyright "js file header description"
/**
 * `!p snip.rv = fn`
 * J&T
 * 
 * Created by DengJinlong on `date +%d/%m/%y`.
 */

'use strict'

endsnippet

# 5
snippet rnCreateStyleSheet "StyleSheet.create()"
var styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#F5FCFF',
    },

    ${1:other view element style here}
});

endsnippet

# 7
snippet rnRegComponent "AppRegistry.registerComponent"
AppRegistry.registerComponent('${1:ComponentName}', () => ${2:ComponentName});
endsnippet

########## { helper snippet } ##########

# 1
snippet rnfunvar "var: function() {}"
${1:varName}: function() {
},

endsnippet

#3
snippet rnWinW "win width"
Dimensions.get('window').width
endsnippet

snippet rnWinH "wid height"
Dimensions.get('window').heigth
endsnippet

# 4
snippet rnAlert "AlertIOS.alert"
AlertIOS.alert(
    '${1:Title}',
    '${2:msg}',
    [
        {text: 'OK', onPress: () => this._alertOkClick},
        {text: 'Cancel', onPress: () => this._alertCancelClick, style: 'cancel'},
    ]
)
endsnippet

snippet rnAlertFun "alert function"
var alert = function(msg) {
    AlertIOS.alert(
        'Title',
        String(msg),
        [
            {text: 'OK', onPress: () => console.log('OK Pressed!')},
            {text: 'Cancel', onPress: () => console.log('Cancel Pressed!'), style: 'cancel'},
        ]
    )
}

snippet rnAlertMsg "alert msg only"
AlertIOS.alert( 'Test', '${2:msg}');
endsnippet

# 5
snippet rnShowLoading "ActivityIndicator loading"
{
    this.state.isLoadingShow ? (
        < View style = {{ flex: 1, justifyContent: 'center', alignItems: 'center' }} >
            < ActivityIndicatorIOS size = "${1:small}" color = "${2:#268DFF}" / >
        < /View >
    ) : {
        ${1:render otherView}
    }
}

endsnippet

snippet rnTabBar "<TabBarIOS..."
<TabBarIOS
    tintColor="white"
    barTintColor="darkslateblue">
    ${1:rnTabBarItem}
</TabBarIOS>
endsnippet

snippet rnTabBarItem "<TabBarIOS.Item..."
<TabBarIOS.Item
    title    = '${1:title}'
    badge    = ''
    icon     = {require('image!${2:assetsImgName}')}
    selectedIcon = {require('image!$2')}
    selected = {this.state.selectedTab === '${3:TabName}'}
    onPress = {
        () => { this.setState({
            selectedTab: '$3',
        });
    }} >
    {this._renderNavigator(${4:navigator}, '$1')}
</TabBarIOS.Item>
endsnippet

snippet rnNavigatorFn "renderNavigator function"
_renderNavigator: function(component, title) {
    return (
        <NavigatorIOS style = {{ flex: 1 }}
            barTintColor = '#007AFF'
            titleTextColor = "#fff"
            tintColor = "#fff"
            translucent = { false }
            initialRoute = {{
                component: component,
                title: title,
            }} />
    );
},

endsnippet

snippet rnTouchable "TouchableHighlight..."
<TouchableHighlight
    underlayColor = "#fff"
    style = {styles.btn}
    onPress = {this.${1:_onPress}.bind(this, ${2:param})} >
    <Text style = {{ color:'#fff' }} >${3:button title}</Text>
</TouchableHighlight >
endsnippet

snippet rnButtonStyle "btn:{}"
btn: {
    marginTop: 10,
    width: 80,
    height: 35,
    backgroundColor: '#3BC1FF',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 4,
}
endsnippet

snippet rnAsyncSgetItem "AsyncStorage.getItem()"
AsyncStorage.getItem('${1:itemKey}', function(err, $1) {
    if (!err && $1) {
        ${2:do something with item} 
    } else {
        ${3:process err}
    }
});

endsnippet

snippet rnAsyncSmultiSet "AsyncStorage.multiSet()" b
AsyncStorage.multiSet([
    ['${1:itemKey_1}', user.$1],
    ['${2:itemKey_2}', user.$2],
], function(err) {
    if (!err) {
    }
});
endsnippet

snippet rnTextInput "<TextInput..."
<TextInput
    style={styles.${1:input}}
    password={${2:true}}
    placeholder="请输入${3:...}"
    onChangeText={this.${4:_userInput}}/>
endsnippet


########## {React ES6 snippets} ##########

# 2
snippet rnImport "import react component"
import React, { PropTypes } from 'react'
import {
  View,
  Image,
  Text,
  StyleSheet,
  PixelRatio,
  Dimensions,
  TouchableHighlight,
  TouchableWithoutFeedback,
} from 'react-native'
endsnippet

#snippet rncomponentDidMount "component did mount" b
#componentDidMount () {
	#${1}
#}$0
#endsnippet


#snippet rncomponentDidUpdate "component did update" b
#componentDidUpdate (prevProps, prevState) {
	#${1}
#}$0
#endsnippet

#snippet rncomponentWillMount "component will mount" b
#componentWillMount () {
	#${1}
#}$0
#endsnippet

#snippet rncomponentWillReceiveProps "component will receive props" b
#componentWillReceiveProps (nextProps) {
	#${1}
#}$0
#endsnippet

#snippet rncomponentWillUnmount "component will unmount" b
#componentWillUnmount () {
	#${1}
#}$0
#endsnippet

#snippet rncomponentWillUpdate "component will update" b
#componentWillUpdate (nextProps, nextState) {
	#${1}
#}$0
#endsnippet

snippet rnPropTypes "propTypes" b
$1.propTypes = {
  optionalArray: PropTypes.array,
  optionalBool: PropTypes.bool,
  optionalFunc: PropTypes.func.isRequired,
  optionalNumber: PropTypes.number,
  optionalObject: PropTypes.object,
  optionalString: PropTypes.string.isRequired,
  requiredAny: PropTypes.any.isRequired,
}
endsnippet

snippet rnPropTypesArray "array props type" b
optionalArray: PropTypes.arrayOf(propTypes.shape({
  optionalObject: PropTypes.object,
  optionalString: PropTypes.string.isRequired,
}))
endsnippet

snippet rnPropTypesEnum "enum props type" b
text: PropTypes.oneOf([
  'Text_1',
  'Text_2'
])
endsnippet

snippet rnClass "create component" b
export default class ${1:ClassName} extends React.Component {
  constructor (props) {
    super(props)
    this.state = {
        ${2:aState}: this.props.${3:theProps},
    }
    // keep a binded function
    this._privateFunction = this.privateFunction.bind(this);
  }

  static defaultProps = {
    theProps: false,
  };

  privateFunction () {
  }

  render () {
    return (
      <View style={{flex:1}}>
      {/*code here*/}
      </View>
    );
  }
}

snippet rnClassWithLifeCycle "create component with life cycle" b
class ${1:ClassName} extends React.Component {
  constructor(props) {
    super(props)
  }

  static defaultProps = {}

  static getDerivedStateFromProps(props, state) {
    return {}
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, info) {}

  componentDidMount() {}

  componentWillUnmount() {}

  shouldComponentUpdate(nextProps, nextState) {}

  getSnapshotBeforeUpdate(prevProps, prevState) { return null; }

  componentDidUpdate(prevProps) {}

  render() {
    return (
      <View style={{flex:1}}>
      {/*code here*/}
      </View>
    );
  }
}

$1.propTypes = {
  optionalFunc: PropTypes.func.isRequired,
  optionalString: PropTypes.string.isRequired,
  optionalObject: PropTypes.object.isRequired,
}
endsnippet

snippet rnshouldComponentUpdate "should component update"
var shallowCompare = require('react-addons-shallow-compare')
shouldComponentUpdate (nextProps, nextState) {
  return shallowCompare(this, nextProps, nextState)
}$0
endsnippet

snippet rnp "get property" i
this.props.${1}
endsnippet

snippet rns "get state" i
this.state.${1}
endsnippet

snippet rnset "this.setState()" i
this.setState({${1:var}: ${2:value}})
endsnippet

snippet rnFetch "Fetch sample"
fetch('https://mywebsite.com/endpoint/', {
  method: 'POST',
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    firstParam: 'yourValue',
    secondParam: 'yourOtherValue',
  })
})
.then((response) => response.text())
.then((responseText) => {
  console.log(responseText);
})
.catch((error) => {
  console.warn(error);
});
endsnippet

snippet rnCreateStatelessComponent "Simplified Custom Component" b
import React, { PropTypes } from 'react'
import {
  View,
  Image,
  Text,
  PixelRatio,
  StyleSheet,
  TouchableHighlight,
  TouchableWithoutFeedback,
} from 'react-native'

const styles = StyleSheet.create({
  ${1:styleName}: {
    height: 20,
    padding: 20,
    margin: 5,
    backgroundColor: 'lightgray',
    alignItems: 'center',
    justifyContent: 'center',
  }
})

/**
 * ${3:description}
 */
const ${2:Button} = (props) => {
  const { children, onClick } = props

  return (
    <TouchableOpacity onPress={onClick} style={styles.$1}>
      <Text>{children}</Text>
    </TouchableOpacity>
  )
}

Button.PropTypes = {
  children: PropTypes.string.isRequired,
  onClick: PropTypes.func.isRequired
}

export default $2
endsnippet

snippet push "navigator push" b
this.props.navigator.push({
  screen: ${1:component},
  title: "${2:xxx}",
  passProps: {
  },
  backButtonTitle: " ",
  navigatorStyle:{
	tabBarHidden:true,
  }
})
endsnippet

snippet imp "import module" b
import {${1:aModuleName}} from './${2:file}'
endsnippet

snippet ref "ref prop"
ref={component => this._${1:textInput}= component}
endsnippet

snippet rnview "View component"
<View style={styles.${1:container}}>
</View>
endsnippet

snippet rntext "Text component" b
<Text style={styles.${1:text}}>$2</Text>
endsnippet

snippet rnimage "Image component" b
<Image style={styles.${1:image}} source={require('')}/>
endsnippet

snippet rnpress "Pressable component" b
<Pressable style={styles.${1:pressable}} onPress={()=>{}}>
$2
</Pressable>
endsnippet

snippet rnScrollView "ScrollView component" b
<ScrollView style={styles.scrollview}>
</ScrollView>
endsnippet
