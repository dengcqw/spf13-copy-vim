########## { Reactive Native Template file } ##########

# 1
snippet copyright "js file header description"
/**
 * `!p snip.rv = fn`
 * TVGuo
 * 
 * Created by DengJinlong on `date +%d/%m/%y`.
 */

'use strict'

endsnippet

# 4
snippet rnCreateComponent "React.createClass()"
var ${1:ComponentName} = React.createClass({

    getInitialState: function() {
        return {
            ${2:Variables here used by 'this.state'}
        };
    },

    render: function() {
        ${3:process state here} 

        return (
            < View style = { styles.container }>
                ${4:View hierarchy}
            </View>
        );
    },

    // Private Process
    _onPress: function() {
    },

});

endsnippet

# 4.1
snippet rnCreateComponentWithMount "React.createClass()"
var ${1:ComponentName} = React.createClass({

    getInitialState: function() {
    return {
    ${2:Variables here used by 'this.state'}
    };
    },

    componentWillMount: function() {
    },
    componentDidMount: function() {
    },
    componentWillunmount: function() {
    },

    render: function() {
        ${3:process state here} 

        return (
            < View style = { styles.container }>
                ${4:View hierarchy}
            </View>
        );
    },

    // Private Process
    _onPress: function() {
    },

});

endsnippet

# 5
snippet rnCreateStyleSheet "StyleSheet.create()"
var styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#F5FCFF',
    },

    ${1:other view element style here}
});

endsnippet

# 6
snippet rnExport "module.exports"
/**
 * Exports
 */
exports.title = '${1:title}'
exports.description = '${2:This is template file for iOS Reactive Native develop! Enjoy it.}'

/**
 * Private Component
 */
module.exports = ${3:ComponentName};
endsnippet

# 7
snippet rnRegComponent "AppRegistry.registerComponent"
/**
 * Public Component
 */
AppRegistry.registerComponent('${1:ComponentName}', () => ${2:ComponentName});
endsnippet

########## { helper snippet } ##########

# 1
snippet rnfunvar "var: function() {}"
${1:varName}: function() {
},

endsnippet

#3
snippet rnWinW "Description"
Dimensions.get('window').width
endsnippet

snippet rnWinH "Description"
Dimensions.get('window').heigth
endsnippet

# 4
snippet rnAlert "AlertIOS.alert"
AlertIOS.alert(
    '${1:Title}',
    '${2:msg}',
    [
        {text: 'OK', onPress: () => this._alertOkClick},
        {text: 'Cancel', onPress: () => this._alertCancelClick, style: 'cancel'},
    ]
)
endsnippet

snippet rnAlertFun "alert function"
var alert = function(msg) {
    AlertIOS.alert(
        'Title',
        String(msg),
        [
            {text: 'OK', onPress: () => console.log('OK Pressed!')},
            {text: 'Cancel', onPress: () => console.log('Cancel Pressed!'), style: 'cancel'},
        ]
    )
}

snippet rnAlertMsg "alert msg only"
AlertIOS.alert( 'Test', '${2:msg}');
endsnippet

# 5
snippet rnShowLoading "ActivityIndicator loading"
{
    this.state.isLoadingShow ? (
        < View style = {{ flex: 1, justifyContent: 'center', alignItems: 'center' }} >
            < ActivityIndicatorIOS size = "${1:small}" color = "${2:#268DFF}" / >
        < /View >
    ) : {
        ${1:render otherView}
    }
}

endsnippet

snippet rnTabBar "<TabBarIOS..."
<TabBarIOS
    tintColor="white"
    barTintColor="darkslateblue">
    ${1:rnTabBarItem}
</TabBarIOS>
endsnippet

snippet rnTabBarItem "<TabBarIOS.Item..."
<TabBarIOS.Item
    title    = '${1:title}'
    badge    = ''
    icon     = {require('image!${2:assetsImgName}')}
    selectedIcon = {require('image!$2')}
    selected = {this.state.selectedTab === '${3:TabName}'}
    onPress = {
        () => { this.setState({
            selectedTab: '$3',
        });
    }} >
    {this._renderNavigator(${4:navigator}, '$1')}
</TabBarIOS.Item>
endsnippet

snippet rnNavigatorFn "renderNavigator function"
_renderNavigator: function(component, title) {
    return (
        <NavigatorIOS style = {{ flex: 1 }}
            barTintColor = '#007AFF'
            titleTextColor = "#fff"
            tintColor = "#fff"
            translucent = { false }
            initialRoute = {{
                component: component,
                title: title,
            }} />
    );
},

endsnippet

snippet rnTouchable "TouchableHighlight..."
<TouchableHighlight
    underlayColor = "#fff"
    style = {styles.btn}
    onPress = {this.${1:_onPress}.bind(this, ${2:param})} >
    <Text style = {{ color:'#fff' }} >${3:button title}</Text>
</TouchableHighlight >
endsnippet

snippet rnButtonStyle "btn:{}"
btn: {
    marginTop: 10,
    width: 80,
    height: 35,
    backgroundColor: '#3BC1FF',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 4,
}
endsnippet

snippet rnAsyncSgetItem "AsyncStorage.getItem()"
AsyncStorage.getItem('${1:itemKey}', function(err, $1) {
    if (!err && $1) {
        ${2:do something with item} 
    } else {
        ${3:process err}
    }
});

endsnippet

snippet rnAsyncSmultiSet "AsyncStorage.multiSet()" b
AsyncStorage.multiSet([
    ['${1:itemKey_1}', user.$1],
    ['${2:itemKey_2}', user.$2],
], function(err) {
    if (!err) {
    }
});
endsnippet

snippet rnTextInput "<TextInput..."
<TextInput
    style={styles.${1:input}}
    password={${2:true}}
    placeholder="请输入${3:...}"
    onChangeText={this.${4:_userInput}}/>
endsnippet


########## {React ES6 snippets} ##########

# 2
snippet rnImport "import react component"
import React { PropTypes } from 'react'
import {
  View,
  Image,
  Text,
  StyleSheet,
  Dimensions,
  TouchableHighlight,
  TouchableWithoutFeedback,
} from 'react-native'
endsnippet

snippet rncs "React.addons.classSet" b
var cx = React.addons.classSet;
cx({
	${1}: ${2}
});
endsnippet

snippet rncomponentDidMount "component did mount" b
componentDidMount () {
	${1}
}$0
endsnippet

snippet rncomponentDidUpdate "component did update" b
componentDidUpdate (prevProps, prevState) {
	${1}
}$0
endsnippet

snippet rncomponentWillMount "component will mount" b
componentWillMount () {
	${1}
}$0
endsnippet

snippet rncomponentWillReceiveProps "component will receive props" b
componentWillReceiveProps (nextProps) {
	${1}
}$0
endsnippet

snippet rncomponentWillUnmount "component will unmount" b
componentWillUnmount () {
	${1}
}$0
endsnippet

snippet rncomponentWillUpdate "component will update" b
componentWillUpdate (nextProps, nextState) {
	${1}
}$0
endsnippet

snippet rnGetDefaultProps "get default props" b
getDefaultProps () {
	return {
		${1}
	};
}$0
endsnippet

snippet rnGetInitialState "get initial state" b
getInitialState () {
	return {
		${1}: ${2}
	};
}$0
endsnippet

snippet rnPropTypes "propTypes" b
$1.propTypes = {
  optionalArray: PropTypes.array,
  optionalBool: PropTypes.bool,
  optionalFunc: PropTypes.func.isRequired,
  optionalNumber: PropTypes.number,
  optionalObject: PropTypes.object,
  optionalString: PropTypes.string.isRequired,
  requiredAny: PropTypes.any.isRequired,
}
endsnippet

snippet rnPropTypesArray "array props type" b
optionalArray: PropTypes.arrayOf(propTypes.shape({
  optionalObject: PropTypes.object,
  optionalString: PropTypes.string.isRequired,
}))
endsnippet

snippet rnPropTypesEnum "enum props type" b
text: PropTypes.oneOf([
  'Text_1',
  'Text_2'
])
endsnippet

snippet rnCreateClass "create class/component" b
export default class ${1:ClassName} extends React.Component {
  constructor (props) {
    super(props)
    this.state = {
        ${2:aState}: this.props.${3:theProps},
    }
    // keep a binded function
    this._privateFunction = this.privateFunction.bind(this);
  }

  static defaultProps = {
    theProps: false,
  };

  _privateFunction () {
  }

  render () {
    return (
      <View style={{flex:1}}>
      {/*code here*/}
      </View>
    );
  }
}

$1.propTypes = {
  optionalFunc: PropTypes.func.isRequired,
  optionalString: PropTypes.string.isRequired,
  optionalObject: PropTypes.object.isRequired,
}
endsnippet

snippet rnshouldComponentUpdate "should component update"
shouldComponentUpdate (nextProps, nextState) {
	${1}
}$0
endsnippet

snippet rnp "get property" i
this.props.${1}
endsnippet

snippet rns "get state" i
this.state.${1}
endsnippet

snippet rnset "this.setState()" i
this.setState({${1:var}: ${2:value}})
endsnippet

snippet rnFetch "Fetch sample"
fetch('https://mywebsite.com/endpoint/', {
  method: 'POST',
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    firstParam: 'yourValue',
    secondParam: 'yourOtherValue',
  })
})
.then((response) => response.text())
.then((responseText) => {
  console.log(responseText);
})
.catch((error) => {
  console.warn(error);
});
endsnippet

snippet timeout "Description" b
setTimeout(()=> {
}, ${1:550})
endsnippet

snippet log "console.log()" b
console.log("${1:----> }"+"${2:msg}")
endsnippet

snippet rnCreateStatelessComponent "Simplified Custom Component" b
import React { PropTypes } from 'react'
import {
  View,
  Image,
  Text,
  StyleSheet,
  TouchableHighlight,
  TouchableWithoutFeedback,
} from 'react-native'

const styles = StyleSheet.create({
  ${1:styleName}: {
    height: 20,
    padding: 20,
    margin: 5,
    backgroundColor: 'lightgray',
    alignItems: 'center',
    justifyContent: 'center',
  }
})

/**
 * ${3:description}
 */
const ${2:Button} = (props) => {
  const { children, onClick } = props

  return (
    <TouchableOpacity onPress={onClick} style={styles.$1}>
      <Text>{children}</Text>
    </TouchableOpacity>
  )
}

Button.PropTypes = {
  children: React.PropTypes.string.isRequired,
  onClick: React.PropTypes.func.isRequired
}

export default $2
endsnippet

########## { Redux } ##########

snippet reduxInit "combine reducers, create store" b
import { createStore, applyMiddleware, combineReducers } from 'redux'
import { Provider } from 'react-redux'
import thunk from 'redux-thunk'
import * as reducers from './reducers'

const createStoreWithMiddleware = applyMiddleware(thunk)(createStore)
const reducer = combineReducers(reducers)
const store = createStoreWithMiddleware(reducer)
endsnippet

snippet connect "redex connect export component" b
import { connect } from 'react-redux'
function mapStateToProps(state) {
  return {
    ${1:xxx}: state.$1
  }
}
export default connect(mapStateToProps)(${2:component})
endsnippet

snippet connect-bind "redux connect and bind action" b
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux';
import * as ${2:xxx}Actions from '../actions/$2Actions';
export default connect((state) => ({
    ${1:xxx}: state.$1
}),
(dispatch) => ({
  actions: bindActionCreators($2Actions, dispatch)
})
)(${3:component})
endsnippet

snippet action "create redux action" b
export function ${1:action}(${2:param}) {
  return {
    type: "com.tvguor.$1",
    $2
  }
}
endsnippet

snippet action-async "create redux complex action" b
export function ${1:action}(${2:param}) {
  return (dispatch, getState) => {
    const { ${3:theProps }} = getState()

    /* ${4:do something here} */

    dispatch(${5:anotherAction}())
  }
}
endsnippet

snippet reducer "create redux reducer" b
// all types defined in one file and export seperately
import ${1:xxxTypes} from '../actions/actionTypes'

const initialState = {
}

export default function ${1:reducer}(state = initialState, action = {}) {
  switch (action.type) {
    case $1.type:
      // cover one state
      return {
        ...state,
        ${2:aState}: action.$2
      }
    case $1:type:
      // create new state obj
      return Object.assign({} , {
      })
    default:
      return state;
  }
}
endsnippet
