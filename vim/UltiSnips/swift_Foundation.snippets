
snippet djDocuPath  "document directory"
let documentPath = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.DocumentDirectory, NSSearchPathDomainMask.UserDomainMask, true).first as String
let documentURL = URL(fileURLWithPath: documentPath)
endsnippet

snippet userDefaults-get  ""
//double float integer stringArray data dictionary array string
if let value = UserDefaults.standard.bool(forKey: ${1:key}) {
}
endsnippet

snippet userDefaults-set  ""
UserDefaults.standard.set(${1:value}, forKey: ${2:key})
endsnippet

#	GCD {
snippet gcdAfter  "Dispatch After"
DispatchQueue.main.asyncAfter(deadline: .now() + ${1:Double}) {
    ${2://Code}
}
endsnippet

snippet gcdMain  "Dispatch Main"
DispatchQueue.main.async {
    ${2://Code}
}
endsnippet

snippet gcdAsynMain  "DispatchAsyncMain"
DispatchQueue.global().async {
    ${1://Code}
	DispatchQueue.main.async {
		${2://Code}
	}
}
endsnippet
#}

snippet alertWithOneBtn  "UIAlertController"
let alertController = UIAlertController(title: <#T##String?#>, message: <#T##String?#>, preferredStyle: .alert)
alertController.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
present(alertController, animated: true, completion: nil)
endsnippet

snippet alertWithTwoBtn "UIAlertController"
let alertController = UIAlertController(title: <#T##String?#>, message: <#T##String?#>, preferredStyle: .alert)
alertController.addAction(UIAlertAction(title: "OK", style: .default, handler: { (action) -> Void in
    <#code#>
}))
alertController.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
present(alertController, animated: true, completion: nil)
endsnippet

snippet appdelegate "Referencing  AppDelegate"
if let appDelegate = UIApplication.shared.delegate as? AppDelegate {
    <#code#>
}
endsnippet

snippet dateFormatter ""
let dateFormatter = DateFormatter()
dateFormatter = "yyyy-MM-dd HH:mm:ss"
//dateFormatter.calendar = Calendar(identifier: .gregorian)
//dateFormatter.locale = Locale(identifier: "en_US_POSIX")
let dateStr = dateFormatter(from: Date())
endsnippet


snippet error "Basic error handling"
if let error = error {
    print(error.localizedDescription)
    return
}
endsnippet

snippet singleton "Singleton initializing"
// MARK: - Initializing a Singleton

static let shared = <#class#>()

override private init() {
}
endsnippet

snippet notif-name "Notification.Name"
public extension NSNotification.Name {
    static let <#name#> = Notification.Name(<#String#>)
}
endsnippet

snippet notif.add  "Swift add notification " b
NotificationCenter.default.addObserver(self, selector: #selector(${1:xxx}Notif), name: Notification.Name(rawValue: <#name#>), object: nil)
@objc func ${1:xxx}Notif(_ notification: Notification) {
}
endsnippet

snippet notif.remove  "Swift remove notification " b
NotificationCenter.default.removeObserver(self)
NotificationCenter.default.removeObserver(self, name: Notification.Name.${1:xxx}, object: nil)
endsnippet

snippet gesture "add TapGesture"
let tapGesuture = UITapGestureRecognizer(target: self, action: #selector(tapAction))
view.addGestureRecognizer(tapGesuture)

@objc func tapAction(sender: UITapGestureRecognizer) {
	${1:// Code}
}
endsnippet

snippet de "deinit"
deinit {
}
endsnippet

snippet rect "CGRect"
CGRect(x: <#T##CGFloat#>, y: <#T##CGFloat#>, width: <#T##CGFloat#>, height: <#T##CGFloat#>)
endsnippet

snippet size "CGSize"
CGSize(width: <#T##CGFloat#>, height: <#T##CGFloat#>)
endsnippet

snippet point "CGPoint"
CGPoint(x: <#T##CGFloat#>, y: <#T##CGFloat#>)
endsnippet

snippet edgeInsets "UIEdgeInsets"
UIEdgeInsets(top: <#T##CGFloat#>, left: <#T##CGFloat#>, bottom: <#T##CGFloat#>, right: <#T##CGFloat#>)
UIEdgeInsets.left(<#xxx#>)
UIEdgeInsets.horizontal(<#xxx#>)
endsnippet

snippet nilstr "String(describing:)"
String(describing:<#value#>)
endsnippet

snippet sel "selector"
#selector(${1:actionName})
endsnippet

snippet substring "replace substring"
let start = value.index(value.startIndex, offsetBy: 6);
let end = value.index(value.startIndex, offsetBy: 6 + 3);
value.replaceSubrange(start..<end, with: "yellow")
endsnippet
