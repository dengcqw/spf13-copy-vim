# Welcome to the Javascript ES6 snippets!

# Generator function
snippet fn
function* ${1:name}(${2}) {
	yield ${3};
}
endsnippet

# Arrow function
snippet => "Arrow function" i
(${1}) => {
	${2}
}
endsnippet

# Class
snippet djclass
class ${1:name} {
	constructor(${2:arg}) {
		${3:// init}
	}
	${4}
}
endsnippet

snippet djclass_extends
class ${1:name} extends ${2:SuperClass} {
  constructor() {
    super();
    ${3}
  }
}
endsnippet

# For of loop
snippet forof
for (let ${1:s} of ${2:sequence}) {
	${3}
}
endsnippet

# Import
snippet import
import ${1:foo} from '${2:bar}'
endsnippet


##############
# Promise
##############
snippet djPromise "Promise Basic Sample"
// Promise start immediately after created
var promise = new Promise(function(resolve, reject) {
  // ... some code

  if (/* async job successfully */){
    resolve(value);
  } else {
    reject(error);
  }
});
// bad
promise.then(function(value) {
  // success
}, function(error) {
  // failure
});
// better
promise.then(function(value){
  // success
}).catch(function(error){
  // failure
});
endsnippet

snippet djPromiseTimeOut "Promise Timeout Sample"
function timeout(ms) {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, ms, 'done');
  });
}

timeout(100).then((value) => {
  console.log(value);
});
endsnippet

snippet djPromiseLoadImage "Promise Load image Sample"
function loadImageAsync(url) {
  return new Promise(function(resolve, reject) {
    var image = new Image();

    image.onload = function() {
      resolve(image);
    };

    image.onerror = function() {
      reject(new Error('Could not load image at ' + url));
    };

    image.src = url;
  });
}
endsnippet

snippet djPromiseAjax "Promise Ajax Sample"
var getJSON = function(url) {
  var promise = new Promise(function(resolve, reject){
    var client = new XMLHttpRequest();
    client.open("GET", url);
    client.onreadystatechange = handler;
    client.responseType = "json";
    client.setRequestHeader("Accept", "application/json");
    client.send();

    function handler() {
      if (this.readyState !== 4) {
        return;
      }
      if (this.status === 200) {
        resolve(this.response);
      } else {
        reject(new Error(this.statusText));
      }
    };
  });

  return promise;
};

getJSON("/posts.json").then(function(json) {
  console.log('Contents: ' + json);
}, function(error) {
  console.error('Some Error: ', error);
});
endsnippet

snippet djPromiseAll "Promise.All() Sample"
var promises = [2, 3, 5, 7, 11, 13].map(function (id) {
  return getJSON("/post/" + id + ".json");
});

Promise.all(promises).then(function (posts) {
  // All Promises are fulfilled
}).catch(function(reason){
  // One is rejected
});
endsnippet
