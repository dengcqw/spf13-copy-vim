
# Collection {
snippet forin-array "for-in (index, value)"
for (index, value) in ${arr}.enumerated() {
    print("Item \(String(index + 1)): \(value)")
}
endsnippet

snippet forin-dic "for-in (key, value)"
for (key, value) in ${1:dic} {
    print("Item \(key): \(value)")
}
endsnippet

snippet Set-operations "set operations sample"
let oddDigits: Set = [1, 3, 5, 7, 9]
let evenDigits: Set = [0, 2, 4, 6, 8]
let primeNums: Set = [2, 3, 5, 7]
oddDigits.union(evenDigits).sorted()
oddDigits.intersection(evenDigits).sorted()
oddDigits.subtracting(primeNums).sorted() // [1, 9]
oddDigits.symmetricDifference(primeNums).sorted() // [1, 2, 9]

oddDigits.isSubset(of: evenDigits)
oddDigits.isSuperset(of: evenDigits)
oddDigits.isDisjoint(with: evenDigits) // no intersection
endsnippet

snippet Dict-setValue "dictionary set value"
if let oldValue = ${1:dic}.updateValue(${2:value}, forKey: "${3:key}") {
    print("Update oldValue(\(oldValue)) with value(\($2)) for \"$3\"")
} else {
    print("Update value error: key \"$3\" not exist")
}
endsnippet

snippet Dict-valueForKey "dictionary get value"
if let value = ${1:dic}["${2:key}"] {
    print("value for $2: \(value)")
} else {
    print("value not exist for key: $2")
}
endsnippet

snippet Dict-removeValue "dictionary remove value"
if let removedValue = ${1:dic}.removeValue(forKey: "${2:key}") {
    print("Removed value for $2: \(removedValue)")
} else {
    print("value not exist for key: $2")
}
endsnippet
#}

# Control flow {
snippet forin-number "for-in number"
for index in 1...5 { // or 1..<5
	print("Current index: \(index)")
}
endsnippet

snippet forin "basic for-in"
for ${1:element} in ${2:collection} {
	print("Current element: \(element)")
	${3:code}
}
endsnippet

snippet forin-cast  "for-in with casting"
for case let ${1:object} in ${2:collection} as ${3:Type} {
}
endsnippet

snippet while ""
while ${1:true} {
	${2:statements}
}
endsnippet
snippet while-repeat "repeat-while"
repeat {
	${2:statements}
} while ${1:true}
endsnippet

snippet if "if else"
if ${1:true} {
} else {
}
endsnippet

snippet ifelf "if elseif"
if ${1:true} {
} else if ${2:true} {
}
endsnippet

snippet switch ""
switch ${1:target} {
case ${2:value}:
default:
}
endsnippet

snippet switch-tuple "switch tuple,value-bindings,where sample"
let somePoint = (1, 1)
switch somePoint {
case (0, 0):
case (let x, 0):
	print("on the x-axis with an x value of \(x)")
case (0, _):
case (-2...2, -2...2):
case let (x, y) where x == y:
case let (x, y):
	print("somewhere else at (\(x), \(y))")
}
endsnippet

snippet switch-enum "switch enum sample"
enum Result {
    case success
	case failure(String)
}
switch result {
	case .success
	case let .failure(message)
}
endsnippet

snippet guard "guard let"
guard let value = dic["key"] else {
	return
}
endsnippet

snippet guard-self ""
guard let self = self else {
	return
}
endsnippet

snippet if-api-check "check api available"
if #available(iOS 10, *, *) {
} else {
}
endsnippet
#}

# function {
snippet func0_0  "no input no output" b
private func ${1:method0_0}() {
    ${2:code}
}
endsnippet

snippet func1_1  "one input one output"
private func ${1:method1_1}(input input: String) -> String {
    ${2:code}
    return ""
}
endsnippet

snippet func2_2  "two input two output"
private func ${1:method2_2}($2 ${2:input_1}: String, ${3:input_2}: String) -> (String, String) {
    ${4:code}
    return ("", "")
}
endsnippet

snippet func2-1  "two input one output"
private func ${1:method2_1}($2 ${2:input_1}: String, ${3:input_2}: String) -> String {
    ${4:code}
    return ""
}
endsnippet

snippet funcN_0  "mutiple input"
private func ${1:methodN_0}($2 ${2:input}: String...) {
    ${3:code}
}
endsnippet

snippet func-inout "params default const, use inout to change them"
func swapTowInts(_ a: inout Int, _ b: inout Int) {
	let temp = a
	a = b
	b = temp
}
endsnippet

snippet func-type "function type statement"
(${1:Int}, $1) -> $1
endsnippet

snippet func-class "class method can be override"
class func ${1:methodName}() {
}
endsnippet
#}

# closure {
snippet {} "closure"
{ (${1:parameters}) -> ${2:returnType} in
	${3:statements}
}
endsnippet

snippet closure  ""
{ (${1:parameters}) -> ${2:returnType} in
    ${3:statements}
}
endsnippet

snippet typealiasClosure  "optional closure typealias"
typealias ${1:ClosureName} = ((${2:arguments}) -> ${3:return value})?
endsnippet

snippet closure-escaping "closure escaping sample"
var completionHandlers: [() -> Void] = []
func someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {
	completionHandlers.append(completionHandler)
}
endsnippet

snippet closure-autoclosure "autoclosure sample"
func serve(customer customerProvider: @autoclosure () -> String) {
}
serve(customer: customers.remove(at: 0))
endsnippet
#}

# properties {
snippet var_lazy  "variable lazy" b
lazy var ${1:variable}: ${2:UILabel} = {
	return ${3:?}
}()
endsnippet

snippet var_set  "variable willSet didSet" b
var ${1:variable}: Int = 0 {
	willSet {
		${2:newValue}
	}
	didSet {
		${3:oldValue}
	}
}
endsnippet

snippet var_get_set  "variable get set"
var ${1:variable}: ${2:Type} {
	get {
		return ${3:?}
	}
	set {
		${4:newValue}
	}
}
endsnippet

snippet var_get  "variable readonly"
var ${1:variable}: ${2:type} {
    return ${3:?}
}
endsnippet

snippet var_closure "var - closure"
var callback: (${1:Int}) -> Void
endsnippet

snippet var_ext "Associated Property"
private struct AssociatedKeys {
    static var <#property#> = "<#property#>"
}

var <#property#> : <#class#>? {
    get {
        return objc_getAssociatedObject(self, &AssociatedKeys.<#property#>) as? <#class#>
    }

    set {
        objc_setAssociatedObject(self, &AssociatedKeys.<#property#>, newValue, objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN_NONATOMIC)
    }
}
endsnippet


#}


# others {
snippet \ "\()"
\(${1:value})
endsnippet

snippet subscript ""
subscript(index: Int) -> ${1:returnType}{
	get {
		return ${2:value}
	}
	set(newValue) {
	}
}
endsnippet

snippet ext "extension" b
extension ${1:Class} {
}
endsnippet

snippet mark  "Mark"
// MARK: - ${1:Section}
endsnippet

snippet do  "do-catch block" b
do {
	${1:code}
} catch {
	${2:code}
}
endsnippet
#}


snippet description "Swift - extension description"
extension ${1:TypeName}: CustomStringConvertible {
    var description: String {
        return "\(rawValue)"
    }
}
endsnippet

snippet sortArrayofstrings  "Swift String Array locale-aware sorting"
${1:arrayOfStrings}.sort({ (a, b) -> Bool in
    let comparisonResult = a.compare(b, options: NSStringCompareOptions.allZeros, range: Range<String.Index>(start: a.startIndex, end: a.endIndex), locale: NSLocale.currentLocale())
    return comparisonResult == NSComparisonResult.OrderedAscending
})
endsnippet

snippet sample-if-switch  "Swift - if switch sample"
// If Statements

let scale:Int = 8
if scale < 10 {
    print("Less than 10")
}

let hat:String = "Fez"
if hat == "Fedora" {
    print("Hat is a Fedora.")
} else {
    print("Hat is not a Fedora.")
}

let hat:String = "Fez"
if !hat.isEmpty {
    print("You are wearing a hat.")
}

// Case Statements

let day = NSCalendar(calendarIdentifier: NSCalendarIdentifierGregorian)!.components(NSCalendarUnit.Weekday, fromDate: NSDate()).weekday
print(day)
switch (day) {
case 1:
    print("Monday")
    break
case 2:
    print("Tuesday")
    break
case 3:
    print("Wednesday")
    break
default:
    print("Invalid day")
}
endsnippet

snippet struct "struct"
struct ${1:Name} {
}
endsnippet

snippet class "class"
class ${1:Name} : ${2:NSObject} {
}
endsnippet

snippet enum "enum"
enum ${1:TypeName} : ${2:Int} {
    case ${2:subType}
}
endsnippet

snippet extension "extension"
extension ${1:Name} {
	${2: //Code}
}
endsnippet


