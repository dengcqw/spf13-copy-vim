snippet NoDefine  "runtime - read var or property"

unsigned int outCount   = 0;
#if Property
objc_property_t *propertyList = class_copyPropertyList([self class], &outCount);

for (int i = 0; i < outCount; i++) {
	objc_property_t property = propertyList[i];
	const char *name = property_getName(property);
	NSString *key = [NSString stringWithCString:name encoding:(NSUTF8StringEncoding)];
	id value = [aDecoder decodeObjectForKey:key];
	[self setValue:(value?:@"") forKey:key];
}
free(propertyList);
#else
Ivar * ivarList         = class_copyIvarList([self class], &outCount);

for (int i = 0; i < outCount; i++) {
	Ivar ivar           = ivarList[i];
	const char * name   = ivar_getName(ivar);
	NSString *key = [NSString stringWithCString:name encoding:(NSUTF8StringEncoding)];
	// 为了简便，只处理string类型，需要其他类型的，写helper方法转换
	[self setValue:([aDecoder decodeObjectForKey:key]?:@"")
		forKey:key];
}
free(ivarList);
#endif

endsnippet

snippet djCATransaction  "Ca - CATransaction"

//By default, there is an implicit transaction block that automatically catches the calls to CATransaction.
//Using CATransaction begin/commit creates an explicit transaction block that allows you to apply different animation characteristics to different elements of an animation.
// begin/commit 显示创建事务块，系统存在一个隐式事务块
[CATransaction begin];
[CATransaction setDisableActions:YES];
self.view.layer.borderWidth = 1.0; // no animation
[CATransaction commit];

endsnippet


snippet djNotifScreenRotation  "Notification - screen rotate orientation"

[[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];

// [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(receivedRotate:) name:UIDeviceOrientationDidChangeNotification object:nil];
// [[NSNotificationCenter defaultCenter] removeObserver:self name:UIDeviceOrientationDidChangeNotification object:nil];
/**
*  @brief  在view里，监听屏幕旋转通知
*
*  @param notification 屏幕旋转通知
*/
-(void)receivedRotate: (NSNotification *)notification {
	dispatch_async(dispatch_get_main_queue(), ^(void) {
    
    [UIView animateWithDuration:0.2 animations:^(void) {
        // 宽变成高，高变成宽
    }];
});
}

endsnippet



snippet djUiChangePageControl  "UI - change PageControl view"
    
for (UIView *view in self.pageControl.subviews)
{
    view.layer.borderColor = [UIColor whiteColor].CGColor;
    view.layer.borderWidth = 1.0f;
}

endsnippet

snippet notification_observewithblock  "Notification: Observe by Name with Block"

self.${1:name}Observer = [[NSNotificationCenter defaultCenter] addObserverForName:${2:name} 
                                                  object:nil 
                                                   queue:[NSOperationQueue mainQueue] 
                                              usingBlock:^(NSNotification *notification) {
                                                  ${3:code}
                                              }];

endsnippet

snippet djCGCreateImageRefFromName  "CG - create CGImageRef from image"

UIImage* image = [UIImage imageNamed:@"${1:Your Image}"];
CGImageRef imageRef = image.CGImage;

endsnippet

snippet GCDAsyncQueue  "GCD - Create Async Queue And Run"
    
dispatch_queue_t callerQueue = dispatch_get_current_queue();
dispatch_queue_t ${1:queueName} = dispatch_queue_create("${2:queueLabel}", NULL);
dispatch_async(${1:queueName}, ^{
        
        // Do async work
        
        dispatch_async(callerQueue, ^{
            
            // Finish work on the caller's queue
            
        });
    });
dispatch_release(${1:queueName});

endsnippet

snippet collectionview_delegate  "UI - UICollectionView Delegates"

#pragma mark - UICollectionViewDataSource
#pragma mark -

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    return ${1:number};
}

// The cell that is returned must be retrieved from a call to -dequeueReusableCellWithReuseIdentifier:forIndexPath:
- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    // dequeue named cell template
    return nil;
}

#pragma mark - UICollectionViewDelegate
#pragma mark -

- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"Selected item!");
}

endsnippet

snippet GCDRunInMainQueue  "GCD - Main Queue"
    
dispatch_async(dispatch_get_main_queue(), ^{
    ${1:code}
});

endsnippet

snippet NoDefine  "CG - fix image upside down"
    
//图形上下文形变，解决图片倒立的问题
CGContextScaleCTM(ctx, 1, -1);
//利用图层形变解决图像倒立问题
layer.transform=CATransform3DMakeRotation(M_PI, 1, 0, 0);
endsnippet

snippet djBlockCommonDefine  "Block - commom bock define"

// common block define
typedef void (^xxBlockCompletion)();
typedef void (^xxBlockBooleanResult)(BOOL succeeded, NSError *error);
typedef void (^xxBlockIntegerResult)(NSInteger number, NSError *error);
typedef void (^xxBlockArrayResult)(NSArray *objects, NSError *error);
typedef void (^xxBlockObjectResult)(id object, NSError *error);
typedef void (^xxBlockDataResult)(NSData *data, NSError *error);
typedef void (^xxBlockStringResult)(NSString *string, NSError *error);

endsnippet


snippet djBlockInlineVoid  "Block - Inline completion block variable"

    void (^${1:variable name})(void) = ^void() {
        ${2:insert code here}
    };
    
endsnippet

snippet GCDTimer  "GCD - timer"

// DISPATCH_TIME_FOREVER= repeat timer
double delayInSeconds = ${1:second};
dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
dispatch_after(popTime, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^(void){
    [self performSelectorOnMainThread:@selector(${2:SEL}) withObject:${3:obj} waitUntilDone:${4:YESorNO}];
});

endsnippet


snippet djFdMethodForwarding  "Fd - method forwarding"

#pragma mark - Method Forwarding
- (BOOL)respondsToSelector:(SEL)aSelector
{
    return [super respondsToSelector:aSelector] || [self.tableViewProxyDelegate respondsToSelector:aSelector];
}

- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector
{
    if ([self.tableViewProxyDelegate respondsToSelector:aSelector]) {
        return [(id) self.tableViewProxyDelegate methodSignatureForSelector:aSelector];
    }
    return [super methodSignatureForSelector:aSelector];
}

- (void)forwardInvocation:(NSInvocation *)anInvocation
{
    if ([self.tableViewProxyDelegate respondsToSelector:[anInvocation selector]]) {
        [anInvocation invokeWithTarget:self.tableViewProxyDelegate];
    }
}


endsnippet

snippet notification_remove_block_observer  "Notification: Remove Block Observer"

[[NSNotificationCenter defaultCenter] removeObserver:self.${1:observer property} 
                                                name:${2:notification name} 
                                                  object:nil];

endsnippet

snippet weakify  "weakify"

@weakify(self);
	
endsnippet


snippet GCDGetQueueLabel  "GCD - Get Queue Label"

NSString *queueLabel = [NSString stringWithCString: dispatch_queue_get_label(dispatch_get_current_queue())encoding:NSUTF8StringEncoding];

endsnippet

snippet djFetchedResultsController  "NSFetchedResultsController"

/*!
 @brief  use setctionNameKeyPath, sort with the key first.
 */
- (NSFetchedResultsController *)fetchedResultsController {
    
    if (_fetchedResultsController != nil) {
        return _fetchedResultsController;
    }
    
    NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init];
    NSEntityDescription *entity = [NSEntityDescription
                                   entityForName:@"PAFootprintEntity" inManagedObjectContext:[NSManagedObjectContext MR_defaultContext]];
    [fetchRequest setEntity:entity];
    
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"userID == '1111'"];
    fetchRequest.predicate = predicate;
    
    NSSortDescriptor *sort = [[NSSortDescriptor alloc]
                              initWithKey:@"date" ascending:NO];
    [fetchRequest setSortDescriptors:[NSArray arrayWithObject:sort]];
    
    [fetchRequest setFetchBatchSize:20];
    
    [NSFetchedResultsController deleteCacheWithName:@"FootPrintCache"];
    
    NSFetchedResultsController *theFetchedResultsController =
    [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest
                                        managedObjectContext:[NSManagedObjectContext MR_defaultContext]
                                          sectionNameKeyPath:@"date"
                                                   cacheName:@"FootPrintCache"];
    self.fetchedResultsController = theFetchedResultsController;
    _fetchedResultsController.delegate = self;
    
    return _fetchedResultsController;
}

endsnippet

snippet djCaBezierLine  "Ca - bezier path line "
    
UIBezierPath *path = [UIBezierPath bezierPath];
[path moveToPoint:CGPointMake(0, 0)];
[path addLineToPoint:CGPointMake(0, 0)];
[path addLineToPoint:CGPointMake(0, 0)];

endsnippet

snippet djFdHooker  "Fd - hooker method"

Class theClass = NSClassFromString(@"${1:?}");
[Hooker hookMethod:@selector(${2:?})
           ofClass:theClass
        withMethod:class_getInstanceMethod([self class], @selector(${3:?}))
keepingOriginalWith:@selector(${4:?})];

endsnippet

snippet djFdFontDefine  "Fd - font define"

// 流行字体，瘦字体
#define FONT_HEITI_LIGHT_SIZE(s)            [UIFont fontWithName:@"STHeitiSC-Light" size:s]
#define FONT_HEITI_LIGHT                    FONT_HEITI_LIGHT_SIZE(14.0f)
#define FONT_HEITI_SIZE(s)                  [UIFont fontWithName:@"STHeitiSC" size:s]
#define FONT_HEITI                          FONT_HEITI_SIZE(14.0f)
#define FONT_HEITI_MEDIUM_SIZE(s)           [UIFont fontWithName:@"STHeitiSC-Medium" size:s]
#define FONT_HEITI_MEDIUM                   FONT_HEITI_MEDIUM_SIZE(14.0f)

#define FONT_HELVETICA_SIZE(s)              [UIFont fontWithName:@"Helvetica" size:s]
#define FONT_HELVETICA_BOLD_SIZE(s)         [UIFont fontWithName:@"Helvetica-Bold" size:s]

#define FONT_HELVETICA_NEUE_SIZE(s)         [UIFont fontWithName:@"Helvetica-Neue" size:s]
#define FONT_HELVETICA_NEUE_LIGHT_SIZE(s)   [UIFont fontWithName:@"Helvetica-Neue-Light" size:s]

#define FONT_SYSTEM_SIZE(s)                 [UIFont systemFontOfSize:s]
#define FONT_BOLD_SYSTEM_SIZE(s)            [UIFont boldSystemFontOfSize:s]


// 一个app统一使用一种字体
UIFont* paNormalFontWithSize(CGFloat size);

UIFont* paNormalFontWithSize(CGFloat size) {
    UIFont* font = FONT_HELVETICA_NEUE_LIGHT_SIZE(size);
    if (font == nil) {
        font = FONT_HELVETICA_SIZE(size);
    }
    return font;
}

endsnippet

snippet strongify  "strongify"

		@strongify(self);
	
endsnippet

snippet NoDefine  "JS - call  oc block"
    
	JSContext *context = [[JSContext alloc]init];  
    
    context[@"creatUIColor"] = ^(NSDictionary *rgbColor){  
        return [UIColor colorWithRed:([rgbColor[@"red"] floatValue] /255.0)  
                               green:([rgbColor[@"green"]floatValue] /255.0)  
                                blue:([rgbColor[@"blue"]floatValue] /255.0)  
                               alpha:1];  
    };  
    JSValue *color = [context evaluateScript:@"creatUIColor({red: 150, green: 150, blue: 200})"];  
    NSLog(@"color:%@",color);  

endsnippet

snippet djAVPlayer  "AV - AVPlayer video player"
    
	NSString *moviePath = [[NSBundle mainBundle] pathForResource:@"mov_bbb" ofType:@"mp4"];
    NSURL *movieURL = [NSURL fileURLWithPath:moviePath];

    AVPlayer *player = [AVPlayer playerWithURL:movieURL];
    player.actionAtItemEnd = AVPlayerActionAtItemEndNone;

    AVPlayerLayer *layer = [AVPlayerLayer layer];

    [layer setPlayer:player];
    [layer setFrame:CGRectMake(0, 0, 1033, 568)];
    [layer setBackgroundColor:[UIColor redColor].CGColor];
    [layer setVideoGravity:AVLayerVideoGravityResizeAspectFill];

    UIView *playerView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 1033, 568)];
    [playerView.layer addSublayer:layer];

endsnippet

snippet djFdDate_is_after  "Fd - Is date after other date"

    BOOL isAfter = [[NSDate distantFuture] compare:[NSDate distantPast]] == NSOrderedDescending;

endsnippet

snippet NoDefine  "Fd - info.plist  app display name"

[NSBundle mainBundle].infoDictionary[@"CFBundleDisplayName"]

endsnippet

snippet GCDCustomDispatch  "GCD - Custom dispatch queue"

// DISPATCH_QUEUE_CONCURRENT 并行队列(系统内核高效管理,可大量生产)
// DISPATCH_QUEUE_SERIAL 串行队列(也可以并行执行, 不可大量生产, 创建线程, 操作一个全局数据时候是线程安全)
//
dispatch_queue_t xxx_queue = dispatch_queue_create("com.ananzu.xxx_queue", DISPATCH_QUEUE_CONCURRENT);

endsnippet

snippet djstring_starts_with  "String Starts With"

[${1:string} hasPrefix:@"${2:match}"]

endsnippet

snippet assert  "NSAssert"

NSAssert(${1: assertion },@"${2: error }");

endsnippet

snippet djMacroUtils  "Macro - Utils"

#ifdef DEBUG
#define debugLog(...) NSLog(__VA_ARGS__)
#define debugMethod() NSLog(@"%s", __func__)
#else
#define debugLog(...)
#define debugMethod()
#endif

#define EMPTY_STRING        @""

#define STR(key)            NSLocalizedString(key, nil)

#define PATH_OF_APP_HOME    NSHomeDirectory()
#define PATH_OF_TEMP        NSTemporaryDirectory()
#define PATH_OF_DOCUMENT    [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0]

// UIConstants provides contants variables for UI control.
#define UI_NAVIGATION_BAR_HEIGHT    44
#define UI_TAB_BAR_HEIGHT           49
#define UI_STATUS_BAR_HEIGHT        20
#define UI_SCREEN_WIDTH             320
#define UI_SCREEN_HEIGHT            ([[UIScreen mainScreen] bounds].size.height)

#define UI_LABEL_LENGTH             200
#define UI_LABEL_HEIGHT             15
#define UI_LABEL_FONT_SIZE          12
#define UI_LABEL_FONT               [UIFont systemFontOfSize:UI_LABEL_FONT_SIZE]



/*
 *  System Versioning Preprocessor Macros
 */
#define SYSTEM_VERSION_EQUAL_TO(v)                  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)
#define SYSTEM_VERSION_GREATER_THAN(v)              ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)
#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)
#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)
#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v)     ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)

/*
 Usage sample:
 
 if (SYSTEM_VERSION_LESS_THAN(@"4.0")) {
 ...
 }
 
 if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"3.1.1")) {
 ...
 }
 
 */

endsnippet

snippet djUIScrollVewLayoutSubView  "UI - scroll view layout subview method"

- (void)layoutScrollImages
{
	UIImageView *view = nil;
	NSArray *subviews = [scrollView1 subviews];

	// reposition all image subviews in a horizontal serial fashion
	CGFloat curXLoc = 0;
	for (view in subviews)
	{
		if ([view isKindOfClass:[UIImageView class]] && view.tag > 0)
		{
			CGRect frame = view.frame;
			frame.origin = CGPointMake(curXLoc, 0);
			view.frame = frame;
			
			curXLoc += (kScrollObjWidth);
		}
	}
	
	// set the content size so it can be scrollable
	[scrollView1 setContentSize:CGSizeMake((kNumImages * kScrollObjWidth), [scrollView1 bounds].size.height)];
}

endsnippet

snippet djIsOpaque  "trick - view is opaque method"

- (BOOL)isOpaque
{
    // If the background color is opaque, return YES
    // otherwise, return NO
    return [[self backgroundColor] alphaComponent] >= 1.0 ? YES : NO;
}

endsnippet

snippet djFdAsyncRequest  "Fd - Network asynchronous request"

NSURL *url = [[NSURL alloc] initWithString:${1:urlString}];
NSMutableURLRequest  *request = [[NSMutableURLRequest alloc] initWithURL:url];
NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:request delegate:self];
[url release];
[request release];
if(connection) {
    receivedData = [[NSMutableData data] retain];
    NSLog(@"intial done!");
} else {
    NSLog(@"sorry connection init error");
}

#pragma mark - NSURLConnection delegate method
- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {
    NSLog(@"get the whole response");
    [receivedData release];
    receivedData = nil;
    receivedData = [[NSMutableData alloc] init];
}

- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
    NSLog(@"get some data");
    [receivedData appendData:data];
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection {
    //do something with the data
    NSLog(@“succeeded  %d byte received", [receivedData length]);
    [connection release];
    [receivedData release];
}
          
- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {
    [connection release];
    [receivedData release];
    NSLog(@"Connection failed! Error - %@ %@",
            [error localizedDescription],
            [[error userInfo] objectForKey:NSErrorFailingURLStringKey]);
}

endsnippet

snippet GCDAsyncDefaultQueue  "GCD - Default priority queue"

dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    ${1:code}
});

endsnippet

snippet djUIMotionEffectTilt  "UI - motion effect tilt"
    
	// 倾斜效果
    UIInterpolatingMotionEffect *verticalInterpolation = [[UIInterpolatingMotionEffect alloc]initWithKeyPath:@"center.y" type:UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis];
    verticalInterpolation.minimumRelativeValue = @(-15);
    verticalInterpolation.maximumRelativeValue = @(15);
    
    UIInterpolatingMotionEffect *horizontalInterpolation = [[UIInterpolatingMotionEffect alloc]initWithKeyPath:@"center.x" type:UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis];
    horizontalInterpolation.minimumRelativeValue = @(-15);
    horizontalInterpolation.maximumRelativeValue = @(15);
    
    [self.${1:view} addMotionEffect:verticalInterpolation];
    [self.${2:view} addMotionEffect:horizontalInterpolation];

endsnippet

snippet djFdListFile  "Fd - list file - file walker"
    
	NSFileManager *manager = [NSFileManager defaultManager];
    NSString *home = [@"~" stringByExpandingTildeInPath];
    NSDirectoryEnumerator *direnum = [manager enumeratorAtPath: home];
    NSMutableArray *files = [NSMutableArray arrayWithCapacity: 42];
    NSString *filename = nil;
    while (filename = [direnum nextObject]) {
        if ([[filename pathExtension]
             isEqualTo: @"jpg"]) {
            [files addObject: filename];
        }
    }
    NSEnumerator *fileenum = [files objectEnumerator];
    while (filename = [fileenum nextObject]) {
        NSLog (@"%@", filename);
    }

endsnippet

snippet djBlockParam  "Block - block as param"
(${1:returnType} (^)(${2:Class *} ${3:variable}))${4:blockName}
endsnippet

snippet djFdGBKtoUTF8  "Fd - GBK to UTF-8 string"
    
NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);
NSString *retStr = [[NSString alloc] initWithData:data encoding:enc];

endsnippet

snippet djFdNSErrorCreation  "Fd - NSError Creation"

NSDictionary *userInfo = @{NSLocalizedDescriptionKey : @"${1:error description}"};
NSError *error = [NSError errorWithDomain:@"${2:domain}" code:${3:errorcode} userInfo:userInfo];

endsnippet

snippet djUICollectionViewInitIWthDefault  "UI - UICollectionView - init with default"

	- (UICollectionView *)collectionView {
    if (nil == _collectionView) {
        
        // flow layout 要继承重写
    	_collectionView = [[UICollectionView alloc] initWithFrame:self.bounds collectionViewLayout:[UICollectionViewFlowLayout new]];
    	_collectionView.showsHorizontalScrollIndicator = NO;
    	_collectionView.backgroundColor = [UIColor clearColor];
    	_collectionView.decelerationRate = UIScrollViewDecelerationRateFast;
    	_collectionView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    	_collectionView.delegate = self;
    	_collectionView.dataSource = self;
        // cell 要继承重写
    	[_collectionView registerClass:[UICollectionViewCell class]
    			forCellWithReuseIdentifier:NSStringFromClass([UICollectionViewCell class])];
    }
    return _collectionView;
}

endsnippet

snippet notificationAddObserver  "Notification: Add Observer"

[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(${1:selector}) name:${2:notification name}object:nil];

endsnippet

snippet djCGDrawImageMethod  "CG - Draw Image Method"

- (UIImage *)${1:method name} {
    static UIImage *image = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        CGSize oldSize = CGSizeMake(${2:CGFloat width}, ${2:CGFloat height});
        CGFloat scale = [[UIScreen mainScreen] scale];
        CGSize newSize = CGSizeMake(oldSize.width*scale, oldSize.height*scale);
        UIGraphicsBeginImageContextWithOptions(newSize, NO, 0.0f);
        CGContextRef ctx = UIGraphicsGetCurrentContext();
        { // START DRAWING
            // insert code from PaintCode here
            ${3:code}
        } // END DRAWING
        image = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();

    });
    return image;
}

endsnippet

snippet djAVVidelOutputSetting  "AV - video output setting"

- (NSDictionary *)outputSetting {
    NSDictionary *videoCleanApertureSettings = [NSDictionary dictionaryWithObjectsAndKeys:
                                                [NSNumber numberWithInt:320], AVVideoCleanApertureWidthKey,
                                                [NSNumber numberWithInt:480], AVVideoCleanApertureHeightKey,
                                                [NSNumber numberWithInt:10], AVVideoCleanApertureHorizontalOffsetKey,
                                                [NSNumber numberWithInt:10], AVVideoCleanApertureVerticalOffsetKey,
                                                nil];
    
    
    NSDictionary *videoAspectRatioSettings = [NSDictionary dictionaryWithObjectsAndKeys:
                                              [NSNumber numberWithInt:3], AVVideoPixelAspectRatioHorizontalSpacingKey,
                                              [NSNumber numberWithInt:3],AVVideoPixelAspectRatioVerticalSpacingKey,
                                              nil];
    
    
    
    NSDictionary *codecSettings = [NSDictionary dictionaryWithObjectsAndKeys:
                                   [NSNumber numberWithInt:960000], AVVideoAverageBitRateKey,
                                   [NSNumber numberWithInt:1],AVVideoMaxKeyFrameIntervalKey,
                                   AVVideoProfileLevelH264Main30, AVVideoProfileLevelKey,
                                   //videoCleanApertureSettings, AVVideoCleanApertureKey,
                                   //videoAspectRatioSettings, AVVideoPixelAspectRatioKey,
                                   nil];
    
    
    NSDictionary *videoSettings = [NSDictionary dictionaryWithObjectsAndKeys:
                                   AVVideoCodecH264, AVVideoCodecKey,
                                   codecSettings,AVVideoCompressionPropertiesKey,
                                   [NSNumber numberWithInt:320], AVVideoWidthKey,
                                   [NSNumber numberWithInt:480], AVVideoHeightKey,
                                   nil];
    return videoSettings;
    
}

endsnippet

snippet djMacroUnused  "Macro - Pragma Unused"

		#pragma unused (${1:variable})
	
endsnippet

snippet djUIImageView  "UI - image view"

UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(${1:CGFloat x}, ${1:CGFloat y}, ${1:CGFloat width}, ${1:CGFloat height})];
imageView.image = [UIImage imageNamed:@"${2:name}"];
imageView.highlightedImage = [UIImage imageNamed:@"${3:name}"];

endsnippet

snippet djFdDateFormatter  "Fd - Format Date and Time"

static NSDataFormatter *formatter = nil;
if (!formatter) {
    formatter = [[NSDateFormatter alloc] init];
}
[formatter setDateStyle:NSDateFormatterNoStyle];
[formatter setTimeStyle:NSDateFormatterShortStyle];
NSLog(@"Date: %@", [formatter stringFromDate:[NSDate date]]);

endsnippet

snippet URLSessionRequestData  "URLSession-request data"
    
	// request data
    NSURLSessionDataTask *jsonDataTask = [session dataTaskWithURL:yourNSURL
                                                completionHandler:^(NSData *data,
                                                                    NSURLResponse *response,
                                                                    NSError *error) {
                                                    // handle NSData
                                                }];
    [jsonDataTask resume];

endsnippet

snippet NoDefine  "Comment variable"

/**< ${1:?} */
///<${2:?}

endsnippet

snippet djCaImageLayer  "Ca - image layer"

UIImage *image = [UIImage imageNamed:@"${1:image}"];
CALayer *alayer = [CALayer layer];
alayer.bounds = CGRectMake(0, 0, image.size.width, image.size.height);
alayer.position = CGPointMake(160, 200); // UIscreen center
alayer.anchorPoint = CGPointMake(0, 0);
//alayer.contents = (id)[UIImage imageNamed:@"${2:image}"].CGImage;
alayer.contents = (id)image.CGImage;
[self.view.layer addSublayer:alayer];

endsnippet

snippet djanimBlockWithOption  "Anim - UIView Animation Block with Options"

UIViewAnimationOptions options = UIViewAnimationOptionAllowUserInteraction;
[UIView animateWithDuration:${1:duration} delay:${2:delay} options:options animations:^{
	    ${3:code}
	} completion:^(BOOL finished) {
}];

endsnippet

snippet djFdLibraryDirectiory  "Fd - library directory path"

		NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) firstObject];

endsnippet

snippet djFdFastEnumerator  "Fd - fast enumerator"
    
	NSEnumerator *enumerator;
    enumerator = [array objectEnumerator];   // or reverseObjectEnumerator
    id thingie;
    while (thingie = [enumerator nextObject]) {
        NSLog (@"I found %@", thingie);
    }

endsnippet

snippet djMacroIs_ios7_or_later  "Macro - Is Running iOS 7 or Later"

		#define RUNNING_IOS_7_OR_LATER  (floor(NSFoundationVersionNumber) > NSFoundationVersionNumber_iOS_6_1)
	
endsnippet

snippet djFdGetInfoPlistValue  "Fd - get info.plist value"
    
	NSString *infoPlistPath = [[[NSBundle mainBundle] bundlePath] stringByAppendingPathComponent:@"/Contents/Info.plist"];
    NSDictionary *plistInfoDic = [NSDictionary dictionaryWithContentsOfFile:infoPlistPath];
    NSString *${1:keyValue} = [plistInfoDic valueForKey:@"${2:key}"];

endsnippet

snippet djRACCommandExec  "RAC - command executing"
    
	[[[[command.executing
        ignore:@NO]
       doNext:^(id _) {
           // The command is currently executing.
           // Display progress indicator.
       }]
      takeUntil:[command.executing ignore:@YES]]
     subscribeCompleted:^{
         // The command has finished executing.
         // Remove progress indicator (if shown) and do something with the command's data.
     }];

endsnippet

snippet djNSFetchResultsController  "NSFetchResultsController-CoreData"

// NSFetchedResultsController
// Boilerplate for creating an NSFetchedResultsController
//
// Platform: iOS
// Language: Objective-C
// Completion Scope: Function or Method

NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] initWithEntityName:${1:(NSString *)}];
fetchRequest.predicate = [NSPredicate predicateWithFormat:${2:(NSString *), ...}];
fetchRequest.sortDescriptors = @[${3:(NSSortDescriptor *), ...}];

NSFetchedResultsController *fetchedResultsController = [[NSFetchedResultsController alloc] initWithFetchRequest:${4:(NSFetchRequest *)} managedObjectContext:${5:(NSManagedObjectContext *)} sectionNameKeyPath:${6:(NSString *)} cacheName:${7:(NSString *)}];
fetchedResultsController.delegate = ${8:(id <NSFetchedResultsControllerDelegate>)};

NSError *error = nil;
if (![fetchedResultsController performFetch:&error]) {
    NSLog(@"Error: %@", error);
}

endsnippet

snippet djReadLineFromFile  "Fd - read line from file"
    
	NSString *filePath = [[NSBundle mainBundle] pathForResource:@"${1:filename}" ofType:@"txt"];
    NSArray *lineList = [[NSString stringWithContentsOfFile:filePath usedEncoding:nil error:nil] componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]];

endsnippet


snippet djCollectionViewDataSource  "UI - UICollectionViewDataSource"

// UICollectionViewDataSource
// Placeholders for essential UICollectionViewDataSource delegate methods
//
// Platform: iOS
// Language: Objective-C
// Completion Scope: Class Implementation

#pragma mark - UICollectionViewDataSource

- (NSInteger)collectionView:(UICollectionView *)collectionView
     numberOfItemsInSection:(NSInteger)section
{
    return ${1:numberOfItemsInSection};
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView
                  cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    UICollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:${2:reuseIdentifier} forIndexPath:indexPath];

    [self configureCell:cell forItemAtIndexPath:indexPath];

    return cell;
}

- (void)configureCell:(UICollectionViewCell *)cell
   forItemAtIndexPath:(NSIndexPath *)indexPath
{
    ${3: statements }
}

endsnippet

snippet djFDFirstResponder  "FD - firstResponder"

//UIResponder+FirstResponder.h

#import <Cocoa/Cocoa.h>
@interface UIResponder (FirstResponder)
+(id)currentFirstResponder;
@end

//UIResponder+FirstResponder.m

#import "UIResponder+FirstResponder.h"
static __weak id currentFirstResponder;
@implementation UIResponder (FirstResponder)
+(id)currentFirstResponder {
    currentFirstResponder = nil;
    [[UIApplication sharedApplication] sendAction:@selector(findFirstResponder:) to:nil from:nil forEvent:nil];
    return currentFirstResponder;
}
-(void)findFirstResponder:(id)sender {
    currentFirstResponder = self;
}
@end

endsnippet

snippet djUIPageViewController  "UI - UIPageViewController"
    UIPageViewController *pageViewCtrl =
        [[UIPageViewController alloc] initWithTransitionStyle:(UIPageViewControllerTransitionStyleScroll) // 左右滑动或翻页效果
                                        navigationOrientation:(UIPageViewControllerNavigationOrientationHorizontal)// 水平或垂直方向切换页面
                                                      options:nil];
    // set nil will disable scroll
    pageViewCtrl.dataSource = self;
    pageViewCtrl.delegate = self;
    [pageViewCtrl setViewControllers:@[]
                           direction:(UIPageViewControllerNavigationDirectionForward) // 控制器的排序:顺序到倒序
                            animated:NO
                          completion:^(BOOL finished) {
    }];
	[self addChildViewController:pageViewCtrl];
    pageViewCtrl.view.frame = CGRectMake(0,
                                                    0,
                                                    self.view.frame.size.width,
                                                    self.view.frame.size.height);
	[self.view addSubview:pageViewCtrl.view];
	[pageViewCtrl didMoveToParentViewController:self];

endsnippet

snippet file_manager_url  "NSFileManager: URLForDirectory"
let fileManager = NSFileManager.defaultManager()
let ${1:cachesURL} = fileManager.URLsForDirectory(NSSearchPathDirectory.${2:CachesDirectory}, inDomains: .UserDomainMask).first! as NSURL
endsnippet

snippet weakself  "Block - Weakself"
__weak typeof(self)weakSelf = self;
endsnippet

snippet djFdLogFontFamily  "Fd - Log Fonts Family"
- (void)logFonts {
    for (id familyName in [UIFont familyNames]) {
        DebugLog(@"Family Name: %@", familyName);
        for (id fontName in [UIFont fontNamesForFamilyName:familyName]) {
            DebugLog(@"Font Name: %@", fontName);
        }
    }
}
endsnippet

snippet djFdStringContain  "Fd - if String Contains"
[${1:string} rangeOfString:@"${2:match}"].location != NSNotFound
endsnippet

snippet djMacroTodoMessage  "Macro - ToDO message"
#define DO_PRAGMA(x) _Pragma (#x)
#define TODO(x) DO_PRAGMA(message ("TODO - " #x))

TODO(Remember to fix this)

endsnippet

snippet djDeprecated  "deprecated  attribute"
__attribute__((deprecated("${1:desc}")))
endsnippet


snippet djUIToolBar  "UI - tool bar"
        UIToolbar *toolBar = [[UIToolbar alloc] initWithFrame:CGRectMake(0.0, 0.0, 100.0, 44.0)];
        UIBarButtonItem *spaceItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil];
        UIBarButtonItem *doneItem = [[UIBarButtonItem alloc] initWithTitle:@"完成" style:UIBarButtonItemStylePlain target:self action:@selector(touchUpDone:)];
        [toolBar setItems:@[spaceItem, doneItem]];
        textField.inputAccessoryView = toolBar;

endsnippet

snippet djFdRegisterFont  "Fd - register Font"
    // 添加字体图标
    NSURL *fontURL = [[NSBundle mainBundle] URLForResource:@"iconfont" withExtension:@"ttf"];
    assert(fontURL);
    CFErrorRef error = NULL;
    if (!CTFontManagerRegisterFontsForURL((__bridge CFURLRef)fontURL, kCTFontManagerScopeProcess, &error))
    {
      if (CFErrorGetCode(error) != kCTFontManagerErrorAlreadyRegistered) {
        CFShow(error);
        abort();
      }
    }

endsnippet

snippet djFdExistDocument  "Fd- Directory or file Exist"
    BOOL isDirectory = TRUE;
    BOOL exists = [[NSFileManager defaultManager] fileExistsAtPath:url.path isDirectory:&isDirectory];
endsnippet

snippet djUIRegisterNibCell  "UI - register nib cell"
#define ReuseIdentifier @""
    UINib * nib = [UINib nibWithNibName:@"" bundle:nil];
    [_tableView registerNib:nib forCellReuseIdentifier:ReuseIdentifier];
endsnippet


snippet djFdUdidCreate  "Fd - UDID Generator"
CFUUIDRef uuid = CFUUIDCreate(NULL);
CFStringRef uuidStr = CFUUIDCreateString(NULL, uuid);
NSString *uniqueIdentifier = [NSString stringWithFormat:@"%@", uuidStr];
endsnippet




snippet NoDefine  "UI - search bar"
    UISearchBar *searchBar = [[UISearchBar alloc]initWithFrame:CGRectMake(0, 0, [UIScreen mainScreen].bounds.size.width, 44)];
    searchBar.prompt = @"prompt"; // 显示在顶部
    searchBar.text = @"test"; // 输入内容
    searchBar.placeholder = @"搜索"; 
    searchBar.showsCancelButton = YES;

    self.tableView.tableHeaderView = searchBar;
    
//@property (strong, nonatomic) UISearchDisplayController *searchVC;
    self.searchVC = [[UISearchDisplayController alloc]initWithSearchBar:searchBar contentsController:self];
    self.searchVC.searchResultsDataSource = self;
    self.searchVC.searchResultsDelegate = self;

endsnippet

snippet try  "Objective-C Try-Catch-Finally Block"
@try {
    ${1:Code that can potentially throw an exception}
}
@catch (NSException *exception) {
    ${2:Handle an exception thrown in the @try block}
}
@finally {
    ${3:Code that gets executed whether or not an exception is thrown}
}
endsnippet

snippet GCDWaitAsync  "GCD - Run Async and Wait"

// do not use
dispatch_queue_t ${1:queue} = dispatch_queue_create("${2:queue}", NULL);
    dispatch_async(queue, ^ {
        // do async work
    });
    
    // do more work concurrently
dispatch_sync(${1:queue}, ^{}); // wait for async block to finish
//dispatch_release(${1:queue}); // not needed for ARC

endsnippet


snippet djUILoadViewFromXib  "UI - load view from xib  OS X"
    NSArray *cellObject = [NSArray array];
    // 10.8
    //[[NSBundle mainBundle] loadNibNamed:MovieTvCellViewNibName owner:nil topLevelObjects:&cellObject];
    // 10.7
    NSNib *nib = [[NSNib alloc] initWithNibNamed:MovieTvCellViewNibName bundle:nil];
    [nib instantiateNibWithOwner:nil topLevelObjects:&cellObject];
    __block MovieTvCellView *cellView;
    [cellObject enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
        if ([obj isKindOfClass:[MovieTvCellView class]]) {
            cellView = (MovieTvCellView *)obj;
            *stop = YES;
        }
    }];

endsnippet

snippet djFdLogFuncStack  "Fd - log function stack"
NSLog(@"%@",[NSThread callStackSymbols]);
endsnippet

snippet djCGFillColor  "CG - fill color"
    CGContextRef context = UIGraphicsGetCurrentContext();
    UIColor * redColor = [UIColor colorWithRed:1.0 green:0.0 blue:0.0 alpha:1.0];
    
    CGContextSetFillColorWithColor(context, redColor.CGColor);
    CGContextFillRect(context, self.bounds);
endsnippet

snippet djFdClassHash  "Fd - class hash"
[NSStringFromClass([${1:aClass} class]) hash]
endsnippet

snippet djCALayerSpin  "Ca - layer spin"
    CABasicAnimation *spinAnimation = [CABasicAnimation animationWithKeyPath:@"transform.rotation"];
    spinAnimation.byValue = [NSNumber numberWithFloat:2*M_PI];
    spinAnimation.duration = self.animationDuration;
    spinAnimation.delegate = self;
    [self.layer addAnimation:spinAnimation forKey:@"spinAnimation"];

endsnippet

snippet djUIResizeImageMethod  "UI - resize image method"
NoDefine
endsnippet


snippet djFdnotification_handler  "Fd - Notication: Handler"
- (void)${1:method name}:(NSNotification *)notification {
}
endsnippet


snippet NoDefine  "JS - callback block"
    context[@"callback"] = ^{
        // JSValue *object = [JSValue valueWithNewObjectInContext:context]; this is error invoking
        // retrieve the callback's context
        // outside callback will be nil
        JSValue *object = [JSValue valueWithNewObjectInContext:[JSContext currentContext]];
        object[@"x"] = @2;
        object[@"y"] = @3;
        return object;
    };  

endsnippet


snippet djGestureTap  "UI - Tap Gesture"
- (void)addTapGesture:(UIView *)view action:(SEL)selector {
    view.userInteractionEnabled = true;
    UITapGestureRecognizer *tapRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:selector];
    [view addGestureRecognizer:tapRecognizer];
}

- (void)tapAction:(UIGestureRecognizer *)gr {
    NSLog(@"Tap action");
}

endsnippet
snippet djGestureDoubleTap  "UI -  Tap Gesture Recognize"
// 另外有个文件在filesnippt文件夹中关于gesture
// 可override gesture 类，并添加新属性
- (void)addTapGesture:(UIView *)view {
    UITapGestureRecognizer *doubleTapRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(doubleTap:)];
    doubleTapRecognizer.numberOfTapsRequired = 2;
    // delay the sending of touchesBegan:withEvent: to its view if it is still possible for the gesture to be recognized.
    doubleTapRecognizer.delaysTouchesBegan = YES;
    [view addGestureRecognizer:doubleTapRecognizer];
}

- (void)doubleTap:(UIGestureRecognizer *)gr {
    NSLog(@"Double Tap");
}

endsnippet

snippet djFdDeleteDocument  "Fd - Delete Document"
- (void)deleteDocument:(UIDocument *)document withCompletionBlock:(void (^)())completionBlock {
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0), ^{
        
        NSError *fileCoordinatorError = nil;
        
        [[[NSFileCoordinator alloc] initWithFilePresenter:nil] coordinateWritingItemAtURL:document.fileURL options:NSFileCoordinatorWritingForDeleting error:&fileCoordinatorError byAccessor:^(NSURL *newURL) {

            // extra check to ensure coordinator is not running on main thread
            NSAssert(![NSThread isMainThread], @"Must be not be on main thread");

            // create a fresh instance of NSFileManager since it is not thread-safe
            NSFileManager *fileManager = [[NSFileManager alloc] init];
            NSError *error = nil;
            if (![fileManager removeItemAtURL:newURL error:&error]) {
                NSLog(@"Error: %@", error);
                // TODO handle the error
            }
            
            if (completionBlock) {
                completionBlock();
            }
        }];
    });
}
endsnippet

snippet djUIMainScreenHeight  "UI - Height for main screen"
CGRectGetHeight([[UIScreen mainScreen] bounds])
endsnippet

snippet NoDefine  "JS - memory management sample"
//http://blog.csdn.net/lizhongfu2013/article/details/9236357
JS:All references are strong
function ClickHandler(button, callback) {
    this.button = button;
    this.button.onClickHandler = this;
    this.handleEvent = callback;
};

OC:
@implementation MyButton
- (void)setOnClickHandler:(JSValue *)handler
{
    //_onClickHandler = handler; this will cause Retain cycle, use below
    _onClickHandler = [JSManagedValue managedValueWithValue:handler];
    [_context.virtualMachine addManagedReference:_onClickHandler
                                       withOwner:self]
}
@end

endsnippet

snippet djUIImagePickerMovie  "UI - image picker take movie"
// import MobileCoreService framework
- (void)showImagePicker {
    UIImagePickerController *ipc = [[UIImagePickerController alloc] init];
    ipc.sourceType = UIImagePickerControllerSourceTypeCamera;
    //ipc.showsCameraControls = YES;
    
    NSArray *availableTypes = [UIImagePickerController availableMediaTypesForSourceType:UIImagePickerControllerSourceTypeCamera];
#if AllowVideoOnly
    if ([availableTypes containsObject:(__bridge NSString *)kUTTypeMovie]) {
        [ipc setMediaTypes:@[(__bridge NSString *)kUTTypeMovie]];
    }
#else
    ipc.mediaTypes = availableTypes;
#endif
    
    ipc.delegate = self;
}

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {
    NSURL *mediaURL = info[UIImagePickerControllerMediaURL];
    if (mediaURL) {
        // Make sure this device supports videos in its photo album.
        if (UIVideoAtPathIsCompatibleWithSavedPhotosAlbum([mediaURL path])) {
            // Save video to photo album.
            UISaveVideoAtPathToSavedPhotosAlbum([mediaURL path], nil, nil, nil);
            // remove the video from temporary direction.
            [[NSFileManager defaultManager] removeItemAtPath:[mediaURL path] error:nil];
        }
    }
}


endsnippet



snippet djFdSyncRequest  "Fd - Network synchronous request"
    // simple but block thread
    NSURL *url = [[NSURL alloc] initWithString:${1:urlString}];
    NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url];
    NSError *err = nil;
    NSData *data = [NSURLConnection sendSynchronousRequest:request
                                         returningResponse:nil
                                                     error:&err];
    if (data == nil) {
        NSLog(@"Code:%ld,domain:%@,localizedDesc:%@",
              [err code], [err domain], [err localizedDescription]);
    } else { 
        // process 
    }
endsnippet


snippet djUICheckViewControllerVisible  "UI - Is View Controller Visible"
    if (self.isViewLoaded && self.view.window) {
        // viewController is visible
    }
endsnippet

snippet djUITextField  "UI - text field"
UITextField *textField = [[UITextField alloc] initWithFrame:CGRectZero];
textField.placeholder = @"placeholder";
textField.font = [UIFont fontWithName:@"HelveticaNeue-UltraLight" size:30];
textField.textColor = [UIColor grayColor];
textField.textAlignment = NSTextAlignmentLeft;
textField.adjustsFontSizeToFitWidth = YES;
textField.keyboardAppearance = UIKeyboardAppearanceDefault;
textField.keyboardType = UIKeyboardTypeNumberPad;
textField.inputAccessoryView = nil;//see snippet input accessory view
textField.delegate = self;

// pop keyboard when appear
//[textField becomeFirstResponder];
endsnippet

snippet djRACEableCommand  "RAC -  eable command"
- (RACCommand *)rac_${1:?} {
    RACSignal *enableSignal = [[RACSignal combineLatest:@[${2:?}]] reduceEach:^id (${3:?}){
        BOOL ret = YES;
        return @(ret);
    }];
    
    @weakify(self);
    return [[RACCommand alloc] initWithEnabled:enableSignal signalBlock:^RACSignal *(id input) {
        @strongify(self);
        return [RACSignal empty];
    }];
}


endsnippet


snippet debugVC  "debugVC"
    openURL(@"debugvc://${1:?}");

endsnippet

snippet GCDDispatchOnce  "GCD - dispatch once"
static dispatch_once_t onceToken;
dispatch_once(&onceToken, ^{
});
endsnippet

snippet djStringHeightAttributed  "String Height Attributed"
CGRect rect = [${1:attributed string} boundingRectWithSize:CGSizeMake(${1:max width}, CGFLOAT_MAX) options:NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading context:nil];
CGFloat height = CGRectGetHeight(rect);
endsnippet

snippet djDateFormatter  "Fd - date formatter"
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:@"yyyy-MM-dd hh:mm:ss"];
    NSString *retStr = [formatter stringFromDate:[NSDate date]];
    NSLog(@"TimeStamp:%@",retStr);

endsnippet


snippet djFDNSInvocation  "Fd - NSInvocation"
    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:[[buttonTarget class] instanceMethodSignatureForSelector:selector]];
    invocation.target = buttonTarget;
    invocation.selector = selector;
    [invocation invoke];

endsnippet

snippet djBlockInline  "Block - Inline Block"
//没有__block标记的变量，其值会被复制一份到block私有内存区
//有__block标记的变量，其地址会被记录在block私有内存区
//    return_type (^blockName)(var_type) = ^return_type (var_type varName)
${1:returnType} (^${2:blockName})(${3:varType}) = ^${1:returnType} (${3:varType} ${6:varName}) {
    return ${7:code};
    };

// ${2:blockName}(${8:variable});

endsnippet

snippet djCaDisplayLink  "Ca - CADisplayLink"
self.displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(displayLinkDidUpdate:)];
self.displayLink.paused = YES;
[self.displayLink addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];

-(void)displayLinkDidUpdate:(id)sender {}

- (void)startAnimation{
    self.beginTime = CACurrentMediaTime();
    self.displayLink.paused = NO;
}

- (void)stopAnimation{
    self.displayLink.paused = YES;
    [self.displayLink invalidate];
    self.displayLink = nil;
}


endsnippet


snippet djHFRequest&Signal  "hf request & signal "
- (NSOperation *)${1:checkLoginPasswd:(NSString *)passwd}
                                  success:(void (^)(AFHTTPRequestOperation *, id))success
                                  failure:(void (^)(AFHTTPRequestOperation *,  NSError *))failure {

    NSString * scheme       = schemeForType(kURLTypeCommon);
    NSString * host         = hostForType(kURLTypeCommon);
    NSString * path         = @"api";

    NSString *url = PAMakeURLString(scheme, host, path);
    NSDictionary * param = @{
                             @"sToken":[self getToken],
                             @"sPwd":passwd
                             };

    NSOperation *operation = [self POST:url
                            parameters:param
                               success:^(AFHTTPRequestOperation *operation, id responseObject) {
                                   if (success) {
                                       success(operation, responseObject);
                                   }
                               } failure:failure];

    return operation;
}

// success and failure can be nil if you don't need
- (RACSignal *)rac_${2:checkLoginPasswd:(NSString *)passwd}
                            success:(void (^)(AFHTTPRequestOperation *, id))success
                            failure:(void (^)(AFHTTPRequestOperation *, NSError *))failure {

    return [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        NSOperation *op = [self ${3:checkLoginPasswd:passwd} success:^(AFHTTPRequestOperation *op, id res) {
            if (success) {
                success(op, res);
            }
            [subscriber sendNext:res];
            [subscriber sendCompleted];
        } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
            if (failure) {
                failure(operation, error);
            }
            [subscriber sendError:error];
        }];
        return [RACDisposable disposableWithBlock:^{
            [op cancel];
        }];
    }];
}


endsnippet

snippet djUIEnterBackgroundExec  "UI - app enter background "
    UIBackgroundTaskIdentifier bgTask =0;
    UIApplication  *app = [UIApplication sharedApplication];
    bgTask = [app beginBackgroundTaskWithExpirationHandler:^{
        [app endBackgroundTask:bgTask];
    }];
    ${1:code}
endsnippet

snippet djObserveNotif  "notifications observe "
NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];
[nc addObserver:self selector:@selector(${1:SEL}) name:${2:NotifiName} object:${3:object}];
// move below to dealloc
[[NSNotificationCenter defaultCenter] removeObserver:self];
endsnippet

snippet djUIToggleViewController  "UI - toggle view controller"
    UINavigationController *navigationController = (UINavigationController *)self.rootViewController;
    UITabBarController *tabController = [navigationController.viewControllers objectAtIndex:0];
    [UIView transitionWithView:navigationController.view
                      duration:0.4
                       options:UIViewAnimationOptionCurveEaseInOut | UIViewAnimationOptionTransitionFlipFromRight | UIViewAnimationOptionBeginFromCurrentState
                    animations:^{
                        [tabController setViewControllers:[self haofangtuoViewControllers]
                                                 animated:YES];
                    }
                    completion:nil];

endsnippet

snippet djCGDrawImageCode  "CG -  Draw Image Code"
CGSize oldSize = CGSizeMake(${1:CGFloat width}, ${1:CGFloat height});
CGFloat scale = [[UIScreen mainScreen] scale];
CGSize newSize = CGSizeMake(oldSize.width*scale, oldSize.height*scale);
UIGraphicsBeginImageContextWithOptions(newSize, NO, 0.0f);
CGContextRef ctx = UIGraphicsGetCurrentContext();
{ // START DRAWING
    // insert code from PaintCode here
    ${2:code}
} // END DRAWING
UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();
//use image

endsnippet

snippet djCodingProtocol  "Fd - NSCoding protocol "
#pragma mark - NSCoding

- (instancetype)initWithCoder:(NSCoder *)coder {
    self = [super initWithCoder:coder];
    if (self) {
        self.varibale = [coder decodeObjectForKey:@"variable"];
    }
    return self;
}

- (void)encodeWithCoder:(NSCoder *)coder {
    [super encodeWithCoder:coder];
    [coder encodeObject:self.varibale forKey:@"varibale"];
}

endsnippet

snippet djNSFetchedResultsControllerDelegate  "NSFetchedResultsControllerDelegate"
// NSFetchedResultsControllerDelegate
// Placeholders for the fetched results controller delegate methods
// 
// Platform: iOS
// Language: Objective-C
// Completion Scope: Class Implementation

#pragma mark - NSFetchedResultsControllerDelegate

- (void)controllerWillChangeContent:(NSFetchedResultsController *)controller {
    [self.tableView beginUpdates];
}

- (void)controller:(NSFetchedResultsController *)controller
  didChangeSection:(id <NSFetchedResultsSectionInfo>)sectionInfo
           atIndex:(NSUInteger)sectionIndex
     forChangeType:(NSFetchedResultsChangeType)type
{
    switch(type) {
        case NSFetchedResultsChangeInsert:
            [self.tableView insertSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationAutomatic];
            break;
        case NSFetchedResultsChangeDelete:
            [self.tableView deleteSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationAutomatic];
            break;
    }
}

- (void)controller:(NSFetchedResultsController *)controller
   didChangeObject:(id)object
       atIndexPath:(NSIndexPath *)indexPath
     forChangeType:(NSFetchedResultsChangeType)type
      newIndexPath:(NSIndexPath *)newIndexPath
{
    switch(type) {
        case NSFetchedResultsChangeInsert:
            [self.tableView insertRowsAtIndexPaths:@[newIndexPath] withRowAnimation:UITableViewRowAnimationAutomatic];
            break;
        case NSFetchedResultsChangeDelete:
            [self.tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationAutomatic];
            break;
        case NSFetchedResultsChangeUpdate:
            [self configureCell:[self.tableView cellForRowAtIndexPath:indexPath] forRowAtIndexPath:indexPath];
            break;
        case NSFetchedResultsChangeMove:
            [self.tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationAutomatic];
            [self.tableView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationAutomatic];
            break;
    }
}

- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller {
    [self.tableView endUpdates];
}
endsnippet

snippet djFdAssociatedObject  "Fd - AssociatedObject"
// key as void
static void *kAssociatedKey = &kAssociatedKey;

- (void)setTheObject:(id)theObject {
    objc_setAssociatedObject(self, kAssociatedKey, theObject, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (id)getTheObject {
    id theObject = objc_getAssociatedObject(self, kAssociatedKey);
    return theObject;
}
endsnippet

snippet djCAGradientMask  "Ca - add Gradient layer as Mask "
- (void)addGradientMaskOn:(UIView *)view {
	CAGradientLayer *maskLayer = [CAGradientLayer layer];
	maskLayer.frame = view.bounds;
	maskLayer.colors = @[(id)[[UIColor clearColor] CGColor],
						 (id)[[UIColor blackColor] CGColor],
						 (id)[[UIColor blackColor] CGColor],
						 (id)[[UIColor clearColor] CGColor]];
	maskLayer.locations = @[@0.0, @0.33, @0.66, @1.0];
	maskLayer.startPoint = CGPointMake(0.0, 0.0);
	maskLayer.endPoint = CGPointMake(1.0, 0.0);
	view.layer.mask = maskLayer;
}


endsnippet

snippet djUIControllerHeight  "UI - Height for View Controller's View"
CGRectGetHeight(self.view.frame)
endsnippet

snippet block_peform_after_delay  "Perform Block After Delay"

- (void)performBlock:(void (^)(void))block afterDelay:(NSTimeInterval)delay {
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, delay * NSEC_PER_SEC), dispatch_get_main_queue(), block);
}
endsnippet

snippet djHFLogin  "haofang login manager"
            [PALoginManager doLoginWithCompeletion:^(PALoginType type) {
                if (type != PALoginTypeNotLogin) {
                }
            }];

endsnippet

snippet djCaAnimBasic  "Anim - CABasicAnimation "
    CABasicAnimation *basicAnim = [CABasicAnimation animationWithKeyPath:@"${1:?}"];
    
    // CAMediaTiming protocal
    basicAnim.beginTime = CFAbsoluteTimeGetCurrent();
    basicAnim.duration = 5;
    basicAnim.repeatCount = 5;
    basicAnim.repeatDuration = 5;
    basicAnim.autoreverses = YES;
    basicAnim.speed = 2;
    basicAnim.timeOffset = 5;
    basicAnim.fillMode = kCAFillModeBackwards;
    
    // CAAnimation attribute
    basicAnim.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];
    basicAnim.delegate = self; // -animationDidStart: && -animationDisStop:
    basicAnim.removedOnCompletion = YES;
    
    // CAPropertyAnimation
    //basicAnim.keyPath = @"alpha";
    basicAnim.additive = NO;
    basicAnim.cumulative = NO;
    basicAnim.valueFunction = nil;
    
    // CABasicAnimation
    basicAnim.fromValue = (id)nil;
    basicAnim.toValue = (id)nil;
    basicAnim.byValue = (id)nil;

endsnippet

snippet djUIGetStringPixelSize  "UI - get string pixel size"
            CGSize maximumSize = CGSizeMake(${1:?}, ${1:?});
            NSString *myString = @"This is a long string which wraps";
            UIFont *myFont = [UIFont fontWithName:@"Helvetica" size:14];
            CGSize myStringSize = [myString sizeWithFont:myFont
                                       constrainedToSize:maximumSize
                                           lineBreakMode:${2:self.myLabel.lineBreakMode}];



CGSize labelSize;
if ([title respondsToSelector:@selector(sizeWithAttributes:)]) {
    labelSize = [title sizeWithAttributes:@{ NSFontAttributeName: _titleLabel.font }];
} else {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
    labelSize = [title sizeWithFont:_titleLabel.font];
#pragma clang diagnostic pop
}

endsnippet

snippet djMacroObjcArc  "Macro - objc_arc"
#if !defined(__has_feature) || !__has_feature(objc_arc)
#error This file must be compiled with ARC. Convert your project to ARC or specify the -fobjc-arc flag.
#endif

endsnippet

snippet djFDThumbnailFromVideoPath  "FD - thrumbnail from video path"
+ (UIImage *)thumbnailImageFromURL:(NSURL *)videoURL {
    AVURLAsset *asset = [[AVURLAsset alloc] initWithURL: videoURL options:nil];
    AVAssetImageGenerator *generator = [[AVAssetImageGenerator alloc] initWithAsset:asset];
    NSError *err = NULL;
    CMTime requestedTime = CMTimeMake(1, 60);     // To create thumbnail image
    CGImageRef imgRef = [generator copyCGImageAtTime:requestedTime actualTime:NULL error:&err];
    NSLog(@"err = %@, imageRef = %@", err, imgRef);
    
    UIImage *thumbnailImage = [[UIImage alloc] initWithCGImage:imgRef];
    CGImageRelease(imgRef);    // MUST release explicitly to avoid memory leak
    
    return thumbnailImage;
}


endsnippet

snippet djStringConstantHeader  "String Constant Header"
extern NSString * const ${1:name};
endsnippet

snippet djFdNotifQueue  "Fd - notifcation queue"
NSNotification *notif = [NSNotification notificationWithName:${1:name} object:self];
// simply delay notif
[[NSNotificationQueue defaultQueue] enqueueNotification:notif postingStyle:NSPostASAP];
// delay notif and coalescing
NSArray *modes = [NSArray arrayWithObject: NSEventTrackingRunLoopMode];
[[NSNotificationQueue defaultQueue] enqueueNotification: notif
                                           postingStyle: NSPostWhenIdle
                                           coalesceMask: NSNotificationCoalescingOnName | NSNotificationCoalescingOnSender
                                               forModes: modes];
// del a notif from queue
[[NSNotificationQueue defaultQueue] dequeueNotificationsMatching: notif
                                                    coalesceMask: NSNotificationCoalescingOnName | NSNotificationCoalescingOnSender];

endsnippet



snippet NoDefine  "fix icon string"
NSString *fixIconString(NSString *iconString) {
    if (![iconString hasPrefix:@"0x"]) {
        iconString = [NSString stringWithFormat:@"0x%@", iconString];
    }
    
    unsigned int iconValue;
    NSScanner* scanner = [NSScanner scannerWithString:iconString];
    [scanner scanHexInt:&iconValue];
    return [[NSString alloc] initWithBytes:&iconValue length:4 encoding:NSUTF32LittleEndianStringEncoding];
}

endsnippet


snippet djMacroSingleton  "Macro - define Singleton"
// Adapted to ARC from Matt Gallagher of CocoaWithLove
// Insert into in .pch to use in a project
#define SYNTHESIZE_SINGLETON_FOR_HEADER(classname) \
+ (classname *)sharedInstance;

#define SYNTHESIZE_SINGLETON_FOR_CLASS(classname) \
 \
    static classname *sharedInstance = nil; \
    static dispatch_once_t onceToken; \
 \
+ (classname *)sharedInstance \
{ \
    dispatch_once(&onceToken, ^{ \
        sharedInstance = [[classname alloc] init]; \
    }); \
	 \
	return sharedInstance; \
} \
 \
endsnippet

snippet djMouseDrag  "mouse drag example OSX"
-(void)mouseDown:(NSEvent *)event
{
    BOOL loop = YES;
    
    NSPoint clickLocation;
    
    // convert the initial click location into the view coords
    clickLocation = [self convertPoint:[event locationInWindow]
			      fromView:nil];
    
    // did the click occur in the draggable item?
    if ([self isPointInItem:clickLocation]) {
        // we're dragging, so let's set the cursor
	// to the closed hand
	[[NSCursor closedHandCursor] push];
	
	NSPoint newDragLocation;
	
	// the tight event loop pattern doesn't require the use
	// of any instance variables, so we'll use a local
	// variable localLastDragLocation instead.
	NSPoint localLastDragLocation;
	
	// save the starting location as the first relative point
	localLastDragLocation=clickLocation;
	
	while (loop) {
	    // get the next event that is a mouse-up or mouse-dragged event
	    NSEvent *localEvent;
	    localEvent= [[self window] nextEventMatchingMask:NSLeftMouseUpMask | NSLeftMouseDraggedMask];
	    
	    
	    switch ([localEvent type]) {
		case NSLeftMouseDragged:
		    
		    // convert the new drag location into the view coords
		    newDragLocation = [self convertPoint:[localEvent locationInWindow]
						fromView:nil];
		    
		    
		    // offset the item and update the display
		    [self offsetLocationByX:(float)(newDragLocation.x-localLastDragLocation.x)
				       andY:(float)(newDragLocation.y-localLastDragLocation.y)];
		    
		    // update the relative drag location;
		    localLastDragLocation=newDragLocation;
		    
		    // support automatic scrolling during a drag
		    // by calling NSView's autoscroll: method
		    [self autoscroll:localEvent];
		    
		    break;
		case NSLeftMouseUp:
		    // mouse up has been detected, 
		    // we can exit the loop
		    loop = NO;
		    
		    // finished dragging, restore the cursor
		    [NSCursor pop];
		    
		    // the rectangle has moved, we need to reset our cursor
		    // rectangle
		    [[self window] invalidateCursorRectsForView:self];
		    
		    break;
		default:
		    // Ignore any other kind of event. 
		    break;
	    }
	}
    };
    return;
}

endsnippet

snippet djRACCommand  "RAC - command"
- (RACCommand *)rac_${1:?} {
    @weakify(self);
    return [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {
        @strongify(self);
        return [RACSignal empty];
    }];
}


endsnippet

snippet djMacroLog  "Macro - Custom NSLog in prefix.pch"
// Custom log macro
// DLog will output like NSLog only when the DEBUG variable is set
#ifdef DEBUG
    #define DLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)
#else
   #define DLog(...) do {} while(0)
#endif
// redirect NSLog
#define NSLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)
//A better version of NSLog
#define NSLog(format, ...) do {                                                                          \
fprintf(stderr, "<%s : %d> %s
",                                           \
        [[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String],  \
        __LINE__, __func__);                                                        \
(NSLog)((format), ##__VA_ARGS__);                                           \
fprintf(stderr, "-------
");                                               \
} while (0)

endsnippet

snippet djUIMoveView  "UI - move view with touch event"
- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
    UITouch *touch = [[touches allObjects] objectAtIndex:0];
    self.startPointInSelf = [touch locationInView:self];
    NSLog(@"start point:%@",NSStringFromCGPoint(self.startPointInSelf));
}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event {
    UITouch *touch = [[touches allObjects] objectAtIndex:0];
    CGPoint pointInView = [touch locationInView:self.containerView];
    
    CGRect frame = self.frame;
    frame.origin = (CGPoint){pointInView.x-self.startPointInSelf.x, pointInView.y-self.startPointInSelf.y};
    self.frame = frame;
}

endsnippet


snippet prjNILabel  "Prj - NI attributedLabel delegate"
    [label addLink:[NSURL URLWithString:@"haofangtuo://view/hftAuthingPrompt"] range:NSMakeRange(0, 5)];
    label.delegate = self;
    label.userInteractionEnabled = YES;

endsnippet

snippet djUILogViewHierarchy  "UI - log UIView hierarchy iOS"
void dumpView(UIView* aView, NSString* indent) {
    if (aView) {
        NSLog(@"%@%@", indent, aView);      // dump this view
        
        if (aView.subviews.count > 0) {
            NSString* subIndent = [[NSString alloc] initWithFormat:@"%@%@",
                                   indent, ([indent length]/2)%2==0 ? @"| " : @": "];
            for (UIView* aSubview in aView.subviews) dumpView( aSubview, subIndent );
            [subIndent release];
        }
    }
}

void dumpWindows() {
    for (UIWindow* window in [UIApplication sharedApplication].windows) {
        dumpView(window, @"dumpView: ");
    }   
}
endsnippet



snippet djrequestWithString  "NSURLRequest "
    NSURL *url = [NSURL URLWithString:@"${1:url}"];
    NSURLRequest *request = [NSURLRequest requestWithURL:url cachePolicy:(NSURLRequestReloadIgnoringCacheData) timeoutInterval:30];

endsnippet

snippet djFdInitWithDictionary  "Fd - Init With Dictionary"
- (id)initWithDictionary:(NSDictionary *)dict {
    self = [super init];
    if (!self) return nil;
    
    [self unpackFromDictionary:dict];
    
    return self;
}

- (NSDictionary *)toDictionary {
    NSMutableDictionary *dict = [NSMutableDictionary new];
    
    return dict;
}

#pragma mark - Private

- (void)unpackFromDictionary:(NSDictionary *)dictionary {
    
}
endsnippet

snippet djUIParagraphStyle  "UI - paragraph style"
    NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
    //设置前部间距 有	 无效
    [paragraphStyle setHeadIndent:20.0];
    //最大宽度
    [paragraphStyle setTailIndent:350.0];
    //[paragraphStyle setLineBreakMode:NSLineBreakByCharWrapping];
    //行间距
    [paragraphStyle setLineSpacing:1.0];
    
    //设置	 间距
    //[paragraphStyle setDefaultTabInterval:50.0];
    //行间距 	 无效
    [paragraphStyle setLineHeightMultiple:1.2];
    //行间隔
    //[paragraphStyle setParagraphSpacing:10.0];
    //段落间距
    [paragraphStyle setParagraphSpacingBefore:5.0];
    //段落首行缩进
    [paragraphStyle setFirstLineHeadIndent:size.height * 2.0 * 1.3];
    self.defaultParagraphStyle = paragraphStyle;

endsnippet

snippet djanimBlock  "Anim - UIView Animation Block"
[UIView animateWithDuration:${1:duration} animations:^{
     ${2:code}
 	} completion:^(BOOL finished) {
}];
endsnippet

snippet djOpenPanel  "openPanel"
- (IBAction)open:(id)sender {
    NSOpenPanel* panel = [NSOpenPanel openPanel];
    [panel setAllowedFileTypes:[NSImage imageFileTypes]];
    [panel setAllowsMultipleSelection:YES];
    [panel beginSheetModalForWindow:[self window] completionHandler:^(NSInteger result) {
        if (result == NSOKButton) {
            NSImage* image = [[NSImage alloc]initWithContentsOfURL:[panel URL]];
            self.imageView.image = image;
            //   _url = [panel URL];
           _urlArray = [panel URLs];
            [self.imageView setNeedsDisplay:YES];
        }
    }];
    panel = nil;
}
endsnippet

snippet djFdCheckErrorOfOSStatus  "Fd - check error of OSStatus"
// CheckError
// Function that extracts human-readable information from OSStatus codes. 
// Credit: "Learning Core Audio: A Hands-on Guide to Audio Programming for Mac and iOS", by Chris Adamson, Kevin Avila
//
// Platform: All
// Language: C
// Completion Scope: Code Expression, Function or Method

static void CheckError(OSStatus error, const char *operation) {
    if (error == noErr) {
      return;
    }
    
    char str[20];
    *(UInt32 *) (str + 1) = CFSwapInt32HostToBig(error);
    if (isprint(str[1]) && isprint(str[2]) && isprint(str[3]) && isprint(str[4])) {
        str[0] = str[5] = '\'';
        str[6] = ' ';
    } else {
        sprintf(str, "%d", (int)error);
    }
    
    fprintf(stderr, "[Error] %s (%s)", operation, str);
    exit(1);
}

endsnippet

snippet djEnumComplexType  "Swfit - enum complex type"
enum BarCode {
case UPCA(Int, Int, Int, Int)
case QRCode(String)
} 
endsnippet

snippet djFdColorStore  "Fd - store color in NSUserDefaults"
    UIColor *textDefaultColor = [UIColor blackColor];
    CGColorRef textDefaultColorRef = textDefaultColor.CGColor;
    NSString *textDefaultColorStr = [CIColor colorWithCGColor:textDefaultColorRef].stringRepresentation;
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    [userDefaults setObject:textDefaultColorStr forKey:@"textColorKey"];

endsnippet


snippet djUIPickerViewDelegate  "UI - UIPickerView delegate datasource"
#pragma mark - picker view datasource

// returns the number of 'columns' to display.
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {
    return 1;
}

// returns the # of rows in each component..
- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {
    return 4;
}

#pragma mark - picker view delegate
// optional

// returns width of column and height of row for each component. 
- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component {
    return 45;
    
}
- (CGFloat)pickerView:(UIPickerView *)pickerView rowHeightForComponent:(NSInteger)component {
    
}

// these methods return either a plain NSString, a NSAttributedString, or a view (e.g UILabel) to display the row for the component.
// for the view versions, we cache any hidden and thus unused views and pass them back for reuse. 
// If you return back a different object, the old one will be released. the view will be centered in the row rect  
- (NSString *)pickerView:(UIPickerView *)pickerView
             titleForRow:(NSInteger)row
            forComponent:(NSInteger)component {
    
}

- (UIView *)pickerView:(UIPickerView *)pickerView
            viewForRow:(NSInteger)row
          forComponent:(NSInteger)component
           reusingView:(UIView *)view {
    
}

- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {
    
}

endsnippet

snippet djUIMailComposeViewController  "UI - MFMailComposeViewController"
// MFMailComposeViewController Initialization & Delegate
// Methods required to use the iOS Mail Composer
//
// Platform: iOS
// Language: Objective-C
// Completion Scope: Class Implementation

#import <MessageUI/MessageUI.h>

- (void)presentModalMailComposerViewController:(BOOL)animated {
    if ([MFMailComposeViewController canSendMail]) {
        MFMailComposeViewController *composeViewController = [[MFMailComposeViewController alloc] init];
        composeViewController.mailComposeDelegate = self;

        [composeViewController setSubject:${1:Subject}];
        [composeViewController setMessageBody:${2:Body} isHTML:YES];
        [composeViewController setToRecipients:@[${3:Recipients}]];

        [self presentViewController:composeViewController animated:animated completion:nil];
    } else {
        [[[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error", nil) message:NSLocalizedString(@"${4:Cannot Send Mail Message}", nil) delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil] show];
    }
}

#pragma mark - MFMailComposeViewControllerDelegate

- (void)mailComposeController:(MFMailComposeViewController *)controller
          didFinishWithResult:(MFMailComposeResult)result
                        error:(NSError *)error
{
    if (error) {
        NSLog(@"%@", error);
    }

    [self dismissViewControllerAnimated:YES completion:nil];
}

endsnippet

snippet djSavePanel  "OSX - save panel"
- (IBAction)save:(id)sender {
    NSOpenPanel* panel = [NSOpenPanel openPanel];
        [panel setCanChooseDirectories:YES];
//    [panel setAllowedFileTypes:[NSImage imageFileTypes]];
//    [panel setAllowsMultipleSelection:YES];
    [panel beginSheetModalForWindow:[self window] completionHandler:^(NSInteger result) {
        if (result == NSOKButton) {
       
            _url = [panel directoryURL];
          
            [self.imageView saveImage:_urlArray path:_url];
        }
    }];
}

endsnippet

snippet djUIInputAccessoryView  "UI - input accessory view"
    UIToolbar *toolBar = [[UIToolbar alloc] initWithFrame:CGRectMake(0.0, 0.0, 100.0, 44.0)];
    UIBarButtonItem *spaceItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil];
    UIBarButtonItem *doneItem = [[UIBarButtonItem alloc] initWithTitle:@"完成" style:UIBarButtonItemStylePlain target:self action:@selector(touchUpDone:)];
    [toolBar setItems:@[spaceItem, doneItem]];
    _textField.inputAccessoryView = toolBar;

endsnippet

snippet URLSessionConfig  "URLSession-config"
    // session config
    NSURLSessionConfiguration *sessionConfig =
    [NSURLSessionConfiguration defaultSessionConfiguration];
    
    sessionConfig.allowsCellularAccess = NO;
    
    [sessionConfig setHTTPAdditionalHeaders:
     @{@"Accept": @"application/json"}];
    
    sessionConfig.timeoutIntervalForRequest = 30.0;
    sessionConfig.timeoutIntervalForResource = 60.0;
    sessionConfig.HTTPMaximumConnectionsPerHost = 1;

endsnippet

snippet djMacroCollection  "Macro - Macros Collection"
#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)

#define isiOS7OrLater floor(NSFoundationVersionNumber) > NSFoundationVersionNumber_iOS_6_1

#define LOG_FRAME(label, frame) DebugLog(@"%@: %f, %f, %f, %f", label, frame.origin.x, frame.origin.y, frame.size.width, frame.size.height)
#define LOG_SIZE(label, size) DebugLog(@"%@, %f, %f", label, size.width, size.height)
#define LOG_POINT(label, point) DebugLog(@"%@: %f, %f", label, point.x, point.y)
#define LOG_OFFSET(label, offset) DebugLog(@"%@: %f, %f", label, offset.x, offset.y)
#define LOG_INSET(label, inset) DebugLog(@"%@: %f, %f, %f, %f", label, inset.top, inset.left, inset.bottom, inset.right)
#define LOG_INDEXPATH(label, indexPath) DebugLog(@"%@: %li, %li", label, indexPath.section, indexPath.row)
#define LOG_INDEXPATH2(label, indexPath) DebugLog(@"%@: %li, %li", label, indexPath.section, indexPath.item)
endsnippet

snippet djanimspringblock  "Anim - UIView Animation Block with Springing"
UIViewAnimationOptions options = UIViewAnimationOptionBeginFromCurrentState;
[UIView animateWithDuration:${1:duration} delay:${2:delay} usingSpringWithDamping:${3:damping} initialSpringVelocity:${1:velocity} options:options animations:^{
    ${5:code}
} completion:^(BOOL finished) {
    if (finished) {
        
    }
}];
endsnippet

snippet djUIlogViewHierarchy  "UI - log NSView hierarchy OSX"
@interface NSView (Dumping)
-(void)dumpWithIndent:(NSString *)indent;
@end

@implementation NSView (Dumping)

-(void)dumpWithIndent:(NSString *)indent {
    NSString *class = NSStringFromClass([self class]);
    NSString *info = @"";
    if ([self respondsToSelector:@selector(title)]) {
        NSString *title = [self performSelector:@selector(title)];
        if (title != nil && [title length] > 0) {
            info = [info stringByAppendingFormat:@" title=%@", title];
        }
    }
    if ([self respondsToSelector:@selector(stringValue)]) {
		NSString *string = [self performSelector:@selector(stringValue)];
		if (string != nil && [string length] > 0) {
			info = [info stringByAppendingFormat:@" stringValue=%@", string];
        }
	}
	NSString *tooltip = [self toolTip];
	if (tooltip != nil && [tooltip length] > 0) {
		info = [info stringByAppendingFormat:@" tooltip=%@", tooltip];
    }
    
	NSLog(@"%@%@%@", indent, class, info);
    
	if ([[self subviews] count] > 0) {
		NSString *subIndent = [NSString stringWithFormat:@"%@%@", indent, ([indent length]/2)%2==0 ? @"| " : @": "];
		for (NSView *subview in [self subviews]) {
			[subview dumpWithIndent:subIndent];
        }
	}
}

@end

endsnippet

snippet djFdCheckBackgroundSupported  "Fd - Is Background Supported"
- (BOOL)isBackgroundSupported {
    UIDevice* device = [UIDevice currentDevice];
    BOOL backgroundSupported = NO;
    if ([device respondsToSelector:@selector(isMultitaskingSupported)]) {
        backgroundSupported = device.multitaskingSupported;
    }
    
    return backgroundSupported;
}
endsnippet

snippet djFdToggleBoolinUserDefaults  "Fd - toggle a bool in user defaults"
	BOOL abool = [[NSUserDefaults standardUserDefaults] boolForKey:@"keyName"];
	abool = !abool;
	[[NSUserDefaults standardUserDefaults] setBool:abool forKey:@"keyName"];

endsnippet

snippet djCAAnimGroup  "Anim - CAAnimationGroup"
    // super class is CAAnimation
    CAAnimationGroup *group = [CAAnimationGroup animation];
    group.animations = @[];
    group.duration = 5; // this duration ends ,all the animation end.
    group.repeatCount = 5; // repeat the group with its duration

endsnippet

snippet djTrickGetViewControllerFromSubView  "trick - get view controller from subview"
-(UIViewController *)cellSuperViewController
{
    id responder = self;
    while (responder){
        if ([responder isKindOfClass:[UIViewController class]]){
            return responder;
        }
        responder = [responder nextResponder];
    }
    return nil;
}

endsnippet


snippet djFdVector  "Fd calc vector and point"
#pragma mark - Maths

static inline CGFloat radians (CGFloat degrees) {return degrees * M_PI / 180.0;}

/**
 *  Calculate distination point with distance, angle, origin.
 *
 *  @param radius   distance between origin and distination point
 *  @param bearing  vector angle in degree
 *  @param origin   origin point
 *
 *  @return distination point
 */
-(CGPoint)toCartesian:(CGFloat)radius bearing:(CGFloat)bearing origin:(CGPoint)origin {
    CGFloat bearingInRadians = radians( bearing );
    
    CGPoint vector = CGPointMake( radius * sinf( bearingInRadians ), -radius * cosf( bearingInRadians ));
    
    return CGPointMake( origin.x + vector.x, origin.y + vector.y );
}

endsnippet

snippet djUITableVDD  "UI - UITableViewDatasource"
#pragma mark - UITableView Datasource

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return 10;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *cellIdentifier = @"Cell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
    
    if(cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];
    }
    
    cell.textLabel.text = [NSString stringWithFormat:@"Cell %d", indexPath.row];
    
    return cell;
}

#pragma mark - UITableView Delegate methods

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    
}
endsnippet

snippet GCDWaitForBlocks  "GCD - Wait for Blocks"
dispatch_queue_t queue = dispatch_queue_create("${1:queue name}", 0);
dispatch_sync(queue,  ^(){
    // insert sync code
});
dispatch_async(queue, ^(){
    // insert async code
});
// wait for queue
dispatch_barrier_sync(queue, ^(){
    // insert completion code
});

endsnippet


snippet djCaAnimKeyframe  "Anim - CAKeyframeAnimation"
    CAKeyframeAnimation *keyAnim = [CAKeyframeAnimation animationWithKeyPath:@"${1:?}"];
    
    // CAMediaTiming protocal
    keyAnim.beginTime = CFAbsoluteTimeGetCurrent();
    keyAnim.duration = 5;
    keyAnim.repeatCount = 5;
    keyAnim.repeatDuration = 5;
    keyAnim.autoreverses = YES;
    keyAnim.speed = 2;
    keyAnim.timeOffset = 5;
    keyAnim.fillMode = kCAFillModeBackwards;
    
    // CAAnimation attribute
    keyAnim.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];
    keyAnim.delegate = self; // -animationDidStart: && -animationDisStop:
    keyAnim.removedOnCompletion = YES;
    
    // CAPropertyAnimation
    //basicAnim.keyPath = @"alpha";
    keyAnim.additive = NO;
    keyAnim.cumulative = NO;
    keyAnim.valueFunction = nil;
    
    // CAKeyframeAnimation
    keyAnim.values = @[];
    keyAnim.keyTimes = @[];
    keyAnim.timingFunctions = @[];
    keyAnim.calculationMode = @"linear";
    
    keyAnim.tensionValues = @[];
    keyAnim.continuityValues = @[];
    keyAnim.biasValues = @[];
    keyAnim.rotationMode = nil;
    keyAnim.path = (CGPathRef)nil;

endsnippet

snippet djFdRunningTest  "Fd - is running test"
static BOOL isRunningTests(void)
{
    return [[[[NSProcessInfo processInfo] environment][@"XCInjectBundle"] pathExtension] isEqualToString:@"octest"];
}

endsnippet

snippet djCGScreenShotAndCrop  "CG - screen shot and crop"
    UIGraphicsBeginImageContext(CGSizeMake(260, 150));
    // 只绘制（0，0，260，150）区域
    [self.view.layer renderInContext:UIGraphicsGetCurrentContext()];
    UIImage *screenshot = UIGraphicsGetImageFromCurrentImageContext();
    // 按（60，40，200，110）剪裁
    CGImageRef imageRef = CGImageCreateWithImageInRect([screenshot CGImage], CGRectMake(60, 40, 200, 110));
    UIGraphicsEndImageContext();
    UIImage *screenshotAfterCrop = [UIImage imageWithCGImage:imageRef];
    CFRelease(imageRef);

endsnippet

snippet djStringConstantsImp  "String Constant Implementation"
NSString * const ${1:name} = @"${2:value}";
endsnippet


snippet NoDefine  "Trick - disable movie player button"
// MPMoviePlayerViewController禁用快进快退按键
[self listSubviewsOfView:avPlayerVC.moviePlayer.view andLevel: 0];
- (void)listSubviewsOfView:(UIView *)view andLevel: (NSInteger)level {
    
    NSArray *subviews = [view subviews];
    if ([subviews count] == 0) return;
    for (UIView *subview in subviews) {
        level++;
        NSString *str = NSStringFromClass([subview class]);
        if(subview.hidden == NO){
            if([str isEqualToString:@"MPKnockoutButton"]) {
                if (level== 19 || level== 18) {
                    subview.userInteractionEnabled = NO;
                }
                // 17 stop btn
                // 16 done btn
            }
        }
        [self listSubviewsOfView:subview andLevel:level];
    }
}


endsnippet

snippet djPostNotif  "notifications post"
[[NSNotificationCenter defaultCenter] postNotificationName:${1:NotifiName} object:nil];
endsnippet

snippet djFdSingleton  "Fd - singleton "
static ClassName *sSharedInstance = nil;

+ (id)sharedInstance{
	if( sSharedInstance == nil ) {
        static dispatch_once_t onceToken;
        dispatch_once(&onceToken, ^{
            sSharedInstance = [[self alloc] initPrivate];
        });
    }
    NSAssert( sSharedInstance != nil, @"Could not create shared ClassToReplace Instance" );
	return sSharedInstance;
}

+ (void)sharedInstance {
	[sSharedInstance release];
	sSharedInstance = nil;
}

// This way is not allowed.
- (instancetype)init {
    @throw [NSException exceptionWithName:@"Singleton"
                                   reason:@"Use +[${1:ClassName} shareInstance]"
                                 userInfo:nil];
    return nil;
}

// This is the really init method
- (instancetype)initPrivate {
    self = [super init];
    
    return self;
}

endsnippet

snippet NoDefine  "Smaple - chaining animation"
    NSMutableArray* animationBlocks = [NSMutableArray new];
    
    typedef void(^animationBlock)(BOOL);
    
    // getNextAnimation
    // removes the first block in the queue and returns it
    animationBlock (^getNextAnimation)() = ^{
        animationBlock block = animationBlocks.count ? (animationBlock)[animationBlocks objectAtIndex:0] : nil;
        if (block){
            [animationBlocks removeObjectAtIndex:0];
            return block;
        }else{
            return ^(BOOL finished){};
        }
    };
    
    //block 1
    [animationBlocks addObject:^(BOOL finished){;
        [UIView animateWithDuration:0.2 delay:0.0 options:UIViewAnimationOptionCurveEaseOut animations:^{
            bg.alpha = 1.0;
        } completion: getNextAnimation()];
    }];
    
    //block 2
    [animationBlocks addObject:^(BOOL finished){;
        [UIView animateWithDuration:0.25 delay:0.0 options:UIViewAnimationOptionCurveEaseInOut animations:^{
            alertView.alpha = 1;
        } completion: getNextAnimation()];
    }];
    
    //add a block to our queue
    [animationBlocks addObject:^(BOOL finished){;
        [self circleAnimation];
    }];
    
    // execute the first block in the queue
    getNextAnimation()(YES);

endsnippet

snippet djBlockTypedef  "Block - typedef"
typedef ${1:returnType}(^${2:name})(${3:arguments});
endsnippet

snippet djFdTimer  "Fd - create a timer with NSTimer"
// 创建
self.${1:var} = [NSTimer scheduledTimerWithTimeInterval:1.5 target:self selector:@selector(${2:timerMethod}) userInfo:nil repeats:YES];
// 取消
[self.${1:var} invalidate];


endsnippet

snippet djFdDegreeToRadian  "Fd - degree to radian"
static inline CGFloat radians (CGFloat degrees) {return degrees * M_PI / 180.0;}
endsnippet

snippet djUITextFieldActionDisable  "UI - TextField 禁用文本操作 action"
// UITextField
//
// 判断是否实现某个responder方法
- (BOOL) canPerformAction:(SEL)action withSender:(id)sender {
    if (!self.disableContenxtMenu) { // 禁用粘贴
        return [super canPerformAction:action withSender:sender];
    }
    
    return NO;
}

// 禁用所有文本操作
- (BOOL)canPerformAction:(SEL)action withSender:(id)sender {
    if (action == @selector(paste:) ||
        action == @selector(cut:) ||
        action == @selector(copy:) ||
        action == @selector(select:) ||
        action == @selector(selectAll:) ||
        action == @selector(delete:) ||
        action == @selector(makeTextWritingDirectionLeftToRight:) ||
        action == @selector(makeTextWritingDirectionRightToLeft:) ||
        action == @selector(toggleBoldface:) ||
        action == @selector(toggleItalics:) ||
        action == @selector(toggleUnderline:)
        ) {
        return NO;
    }
    return [super canPerformAction:action withSender:sender];
}

endsnippet

snippet GCDComputeBackground  "GCD - compute background"
    // 1) 从系统中获取一个并行队列
    dispatch_queue_t concurrentQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_async(concurrentQueue, ^{
        // code here 2) 在后台线程,做创建和计算
        dispatch_async(dispatch_get_main_queue(), ^{
            //code here 3) 在主线程中显示内容
        });
        
    });

endsnippet


snippet djFdRun_on_main_thread  "Fd - Run on Main Thread"
void runOnMainQueueWithoutDeadlocking(void (^block)(void))
{
    if ([NSThread isMainThread])
    {
        block();
    }
    else
    {
        dispatch_sync(dispatch_get_main_queue(), block);
    }
}
endsnippet

snippet djUILabel  "UI - label "

UILabel *label = [[UILabel alloc] initWithFrame:CGRectZero];
label.numberOfLines = 1;
label.textAlignment = NSTextAlignmentLeft;
label.backgroundColor = [UIColor clearColor];
label.textColor = [UIColor blackColor];
label.text = @"${1:?}";
label.font = [UIFont systemFontOfSize:24];
//label.attributedText = ${2:?};
label.adjustsFontSizeToFitWidth = YES;

endsnippet

snippet djCaLayerPropertyList  "Ca - layer with property"
    // (backgroundColor 可以用图片做背景
    // position 中心点，cornerRadius圆角，borderColor&width边框
    // shadowOffset 阴影大小
    // shouldRasterize ?
// 当shouldRasterize设成true时，layer被渲染成一个bitmap，并缓存起来，等下次使用时不会再重新去渲染了。实现圆角本身就是在做颜色混合（blending），如果每次页面出来时都blending，消耗太大，这时shouldRasterize = yes，下次就只是简单的从渲染引擎的cache里读取那张bitmap，节约系统资源。
// 额外收获：如果在滚动tableView时，每次都执行圆角设置，肯定会阻塞UI，设置这个将会使滑动更加流畅。
// rasterize 是栅格化的意思
// rasterizeScale和shouldRasterize可以一起使用)
// 一般rasterizeScale = [UIScreen mainScreen].scale
    CALayer *layer = [CALayer layer];
    layer.backgroundColor = [UIColor whiteColor].CGColor;  //or CGIamgeRef图片做背景
    layer.bounds = CGRectMake(0, 0, ${1:200}, ${1:200});
    layer.position = CGPointMake(${2:160}, ${3:170});
    layer.opacity = 1.0;
    layer.cornerRadius = 10; // 圆角
    layer.borderColor = [UIColor greenColor].CGColor;
    layer.borderWidth = 1.0;
    layer.shadowOffset = CGSizeMake(0, 2);
    layer.shadowOpacity = 0.35;
    layer.shadowColor = [UIColor darkGrayColor].CGColor;
    layer.shouldRasterize = YES;
    [${4:rootLayer} addSublayer:layer];

endsnippet

snippet djCaShapeLayer  "Ca - ShapeLayer"
// 路径覆盖整个视图
UIBezierPath *outerPath = [UIBezierPath bezierPathWithRect:self.view.bounds];
// 圆形路径
UIBezierPath *innerPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(100, 100, 50, 50)];
// 添加路径，形成两个闭环路径
[outerPath appendPath:innerPath];

CAShapeLayer *shapeLayer = [CAShapeLayer layer];
shapeLayer.path = outerPath.CGPath;
shapeLayer.fillColor = [UIColor colorWithWhite:0.1 alpha:0.6].CGColor;
// 只填充两个闭环间的路径
shapeLayer.fillRule = kCAFillRuleEvenOdd;

// 设置边线属性
shapeLayer.strokeColor = [UIColor blueColor].CGColor;
shapeLayer.lineWidth = 2.0;
shapeLayer.lineDashPattern = [NSArray arrayWithObjects:[NSNumber numberWithInt:6], [NSNumber numberWithInt:2], nil];
[self.view.layer addSublayer:shapeLayer];

endsnippet


snippet djNSURLMethodSample  "NSURL method sample"
- (void)NSURLMethod {
    NSURL *url = [NSURL URLWithString:@"http://www.baidu.com/search?id=1"];
    NSLog(@"scheme:%@", [url scheme]); //协议 http
    NSLog(@"host:%@", [url host]);     //域名 www.baidu.com
    NSLog(@"absoluteString:%@", [url absoluteString]); //完整的url字符串 http://www.baidu.com:8080/search?id=1
    //(刚才在真机上跑了一下，并没有打印出来端口 8080 啊)
    NSLog(@"relativePath: %@", [url relativePath]); //相对路径 search
    NSLog(@"port :%@", [url port]);  // 端口 8080
    NSLog(@"path: %@", [url path]);  // 路径 search
    NSLog(@"pathComponents:%@", [url pathComponents]); // search
    NSLog(@"Query:%@", [url query]);  //参数 id=1
 
}

endsnippet

snippet djUILabelSize  "UI - label size for ios 7"
    NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc]init];
    paragraphStyle.lineBreakMode = NSLineBreakByWordWrapping;
    NSDictionary *attributes = @{NSFontAttributeName:someFont, NSParagraphStyleAttributeName:paragraphStyle.copy};
    
    labelSize = [someText boundingRectWithSize:CGSizeMake(207, 999) options:NSStringDrawingUsesLineFragmentOrigin attributes:attributes context:nil].size;
    /*
     This method returns fractional sizes (in the size component of the returned CGRect); to use a returned size to size views, you must use raise its value to the nearest higher integer using the ceil function.
     */
    labelSize.height = ceil(labelSize.height);
    labelSize.width = ceil(labelSize.width);

endsnippet

snippet NoDefine  "CG - draw wave border"
// 绘制锯齿边框，要点是保证没个点绘制在view的bounds内
#define ZIG_SIZE 2.5
- (void)drawRect:(CGRect)rect {
    // Drawing code
    UIBezierPath *mask = [UIBezierPath bezierPath];
    // start from origin (0, 0)
    [mask moveToPoint:CGPointZero];
    CGFloat x = 0;
    CGFloat y = 0;
    CGFloat width = self.bounds.size.width;
    CGFloat height = self.bounds.size.height;
    
    BOOL zig = YES;
    
    while (y < height) { // zig-zag down the left edge
        y+= ZIG_SIZE;
        [mask addLineToPoint:CGPointMake(zig? ZIG_SIZE : 0,
                                         y)];
        zig = !zig;
    }
    
    while (x < width) { // bottom edge
        x+= ZIG_SIZE;
        [mask addLineToPoint:CGPointMake(x,
                                         zig?(y-ZIG_SIZE):y)];
        zig = !zig;
    }
    
    while (y > 0) { // zig-zag back up the right edge
        y-= ZIG_SIZE;
        [mask addLineToPoint:CGPointMake(width - (zig? ZIG_SIZE : 0),
                                         y)];
        zig = !zig;
    }
    
    while (x > 0 ) { // top edge
        x-= ZIG_SIZE;
        [mask addLineToPoint:CGPointMake(x,
                                         zig?ZIG_SIZE:0)];
        zig = !zig;
    }
    
    [[UIColor purpleColor] set];
    [mask fill];
}


endsnippet

snippet djTrickPerspect  "Trick - 投影 perspect"
/*
 *  平行投影转透视投影公式
 *  @orignalTransform       需要进行转换的对象
 *  @center     投影中心
 *  @disZ       (m34 = -1.0f/disZ) 透视效果，要操作的这个对象要有旋转的角度，否则没有效果。
                当然,z方向上得有变化才会有透视效果m34的默认值是0，也就是说disZ无穷大，
                这意味layer in projection plane（投射面）和layer in world coordinate重合了。 
                disZ越小透视效果越明显。
 *  @example
        [UIView animateWithDuration:1.0 animations:^{
            CATransform3D tempTransform = CATransform3DMakeRotation(-M_PI/5, 1, 0, 0);
            CATransform3D rotateTransform= [self CATransform3DPerspect:tempTransform WithCenter: CGPointMake(0, 0) WithDisZ:400];
            self.avatarImage.layer.transform=rotateTransform;
        }];
 */
- (CATransform3D)CATransform3DPerspect:(CATransform3D)orignalTransform WithCenter:(CGPoint)center WithDisZ:(float)disZ {
    return CATransform3DConcat(orignalTransform, [self CATransform3DMakePerspective:center WithDisZ:disZ]);
}

- (CATransform3D)CATransform3DMakePerspective:(CGPoint)center WithDisZ:(float)disZ {
    CATransform3D transToCenter = CATransform3DMakeTranslation(-center.x, -center.y, 0);
    CATransform3D transBack = CATransform3DMakeTranslation(center.x, center.y, 0);
    CATransform3D scale = CATransform3DIdentity;
    scale.m34 = -1.0f/disZ;
    return CATransform3DConcat(CATransform3DConcat(transToCenter, scale), transBack);
}

endsnippet

snippet NoDefine  "clang"
__attribute__((deprecated))
endsnippet


snippet djRACSyncChainOperations  "RAC - sync chain operations sample"
    // synchronous chain of operations sample
    [[[[service connect] flattenMap:^RACStream *(id value) {
        return [service doSomething1];
    }] flattenMap:^RACStream *(id something1Value) {
        // if doSomething1 is successful, 'somethingValue' is passed via sendNext
        return [service disconnect];
    }] subscribeError:^(NSError *error) {
        // Error occurred!  Handle "error" if necessary.
    } completed:^{
        // Asynchronous chain of operations succeeded.
    }];

endsnippet



snippet NoDefine  "hex string to icon string"
NSString *fixIconString(NSString *iconString) {
    if (![iconString hasPrefix:@"0x"]) {
        iconString = [NSString stringWithFormat:@"0x%@", iconString];
    }
    
    unsigned int iconValue;
    NSScanner* scanner = [NSScanner scannerWithString:iconString];
    [scanner scanHexInt:&iconValue];
    return [[NSString alloc] initWithBytes:&iconValue length:4 encoding:NSUTF32LittleEndianStringEncoding];
}

endsnippet

snippet djSampleViewControllerPragmaMarks  "Sample - ViewController pragam marks"
#pragma mark - Init

- (void)dealloc {
}

- (instancetype)init {
    self = [super init];
    if (self) {
        // Init code here
    }
    return self;
}

#pragma mark - View lifecycle

- (void)loadView {
    [super loadView];
    // add subview here
}

- (void)viewWillLayoutSubviews {
    [super viewWillLayoutSubviews];
}

- (void)viewDidLoad {
    [super viewDidLoad];
}

#pragma mark - Delegate && datasource

#pragma mark - Event response

//#pragma mark - Private methods

#pragma mark - Setter and Getter


endsnippet

snippet djEnum  "Fd - enum typedef"
typedef NS_ENUM(NSUInteger, ${1:DisplayType}) {
    ${1:DisplayType},
    ${1:DisplayType},
    ${1:DisplayType},
    ${1:DisplayType}
};

endsnippet

snippet djFdStringAttribute  "Fd attribute string"
    NSString *string = @"${1:content}";
	NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc]initWithString:string];
    
    NSDictionary *dictOfAttributs = @{
        NSFontAttributeName : [UIFont systemFontOfSize:22],
        NSForegroundColorAttributeName : [UIColor greenColor]
    };
    
    NSString *partString = @"${2:part of content}";
    NSRange range = [string rangeOfString:partString];
    [attributedString addAttributes:dictOfAttributs range:range];

endsnippet

snippet djUIMessage  "UI - message SMS MFMessageComposeViewController"
#pragma mark - SMS Messaging
#import <MessageUI/MessageUI.h>

- (void)messageComposeViewController:(MFMessageComposeViewController *)controller
                 didFinishWithResult:(MessageComposeResult)result
{
    switch (result) {
        case MessageComposeResultCancelled:
            break;
        case MessageComposeResultFailed: {
            UIAlertView *warningAlert =
            [[UIAlertView alloc] initWithTitle:@"Error"
                                       message:@"Failed to send SMS!"
                                      delegate:nil
                             cancelButtonTitle:@"OK"
                             otherButtonTitles:nil];
            [warningAlert show];
            break;
        }
        case MessageComposeResultSent:
            break;
        default:
            break;
    }

    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)showSMS
{
    // _contacts 从address book 获得
    NSArray *recipients = @[_contacts[_recipientIndex][@"phone"]];
    NSString *message = @"MESSAGE";

    MFMessageComposeViewController *messageController = [[MFMessageComposeViewController alloc] init];
    messageController.messageComposeDelegate = self;
    [messageController setRecipients:recipients];
    [messageController setBody:message];
    [self presentViewController:messageController animated:YES completion:nil];
}

endsnippet

snippet djSampleMainMethodWithoutInterfaceBuilder  "Sample - main method without Interface Builder"
int main(int argc, char *argv[])
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    int retVal = UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
    [pool release];
    
    return retVal;
}

endsnippet

snippet djCaTransition  "Anim - CATransition"
- (void)addTransitionAmination:(CALayer *)layer {
    //CATransition类实现层的转场动画。你可以从一组预定义的转换或者通过提供定制的CIFilter实例来指定转场效果。
    //定义个转场动画，父类是CAAnimation
    //提供渐变效果:(推拉push效果,消退fade效果,揭开reveal效果)
    CATransition *animation = [CATransition animation];
    //转场动画持续时间
    animation.duration = 0.2f;
    //变化曲线
    animation.timingFunction=UIViewAnimationCurveEaseInOut;
    //转场动画类型, reveal显现
    animation.type = kCATransitionReveal;
    //转场动画将去的方向
    animation.subtype = kCATransitionFromBottom;
    // 控制整个动画的起始点和终止点，类似strokeStart,strokeEnd
    animation.startProgress = 0.0f;
    animation.endProgress = 0.0f;
    // Core Image filter
    animation.filter = nil;
    //添加动画 （转场动画是添加在层上的动画）
    [${1:?}.layer addAnimation:animation forKey:@"transition"];
    
    // 以下几种转场动画调用的苹果的私有API
    /*
     animation.type = @"cube";//---立方体
     animation.type = @"suckEffect";//103 吸走的效果
     animation.type = @"oglFlip";//When subType is "fromLeft" or "fromRight", it's the official one.
     animation.type = @"rippleEffect";//110波纹效果
     animation.type = @"pageCurl";//101翻页起来
     animation.type = @"pageUnCurl";//102翻页下来
     animation.type = @"cameraIrisHollowOpen ";//107//镜头开
     animation.type = @"cameraIrisHollowClose ";//106镜头关
     */
}


endsnippet

snippet djInitWithDefault  "init with default"
- (id)initWithDefault {
    self = [super init];
    if (self) {
        self.cellClass = [PAUserTabAvatarCell class];
        self.cellType =  [PAUserTabAvatarCell cellIdentifier];
        self.cellHeight = [PAUserTabAvatarCell cellHeight];
    }
    return self;
}


endsnippet

snippet djUIResizeImage  "UI - Image Resize to Max"
- (UIImage *)resizeImage:(UIImage *)image toMaximumSize:(CGSize)maxSize {
    CGFloat widthRatio = maxSize.width / image.size.width;
    CGFloat heightRatio = maxSize.height / image.size.height;
    CGFloat scaleRatio = widthRatio < heightRatio ? widthRatio : heightRatio;
    CGSize newSize = CGSizeMake(image.size.width * scaleRatio, image.size.height * scaleRatio);
    
    UIGraphicsBeginImageContextWithOptions(newSize, NO, image.scale);
    [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];
    UIImage *resizedImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return resizedImage;
}
endsnippet

snippet MacroCGD_run_on_main_queue  "Macro - GCD -  Run on Main Queue"
#define gcd_run_on_main_queue(block) \
    if ([NSThread isMainThread]) \
        block(); \
    else \
        dispatch_sync(dispatch_get_main_queue(), block); \

endsnippet

snippet djFdLogTimeInterval  "Fd - log time interval"
    NSTimeInterval start= [[NSDate date] timeIntervalSince1970];
    NSLog(@"application terminate start...%f", start);
    // code here
    NSTimeInterval end= [[NSDate date] timeIntervalSince1970];
    NSLog(@"application terminate end...%f", end);
    NSLog(@"time interval to stop app:%f",end-start);

endsnippet



snippet djUILabelTextHeight  "UI - label text height"
/**
 *  @brief  设置完label属性后，通过此方法获取label的高度
 *
 *  @param lbText  UILabel object
 *
 *  @return label height
 *  @note  这个方法是否处理多行？
 */
- (double)getTextHeight:(UILabel *)lbText {
    double textHeight = 0.0;
    
    if ([[[UIDevice currentDevice] systemVersion] doubleValue] >= 7.0)
    {
        NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
        paragraphStyle.lineBreakMode = NSLineBreakByWordWrapping;
        NSDictionary *attributes = @{NSFontAttributeName:lbText.font, NSParagraphStyleAttributeName:paragraphStyle.copy};
        CGFloat labelWidth = lbText.frame.size.width;
        CGRect rect = [lbText.text boundingRectWithSize:CGSizeMake(labelWidth, MAXFLOAT)
                                                options:NSStringDrawingUsesLineFragmentOrigin
                                             attributes:attributes
                                                context:nil];
        
        //  返回大于或者等于指定表达式的最小整数
        textHeight = ceil(rect.size.height);
    }
    else
    {
        CGSize size = [lbText.text sizeWithFont:lbText.font
                              constrainedToSize:CGSizeMake(lbText.frame.size.width, MAXFLOAT)
                                  lineBreakMode:NSLineBreakByWordWrapping];
        
        textHeight = ceil(size.height);
    }
    
    return textHeight;
}

endsnippet


snippet djUIScrollView  "UI - scrollView"
    UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, ${1:kScrollWidth}, ${2:kScrollHeight})];
	// note: the following can be done in Interface Builder, but we show this in code for clarity
	[scrollView setBackgroundColor:[UIColor blackColor]];
	[scrollView setCanCancelContentTouches:NO];
	scrollView.indicatorStyle = UIScrollViewIndicatorStyleWhite;
	scrollView.clipsToBounds = YES;		// default is NO, we want to restrict drawing within our scrollview
	scrollView.scrollEnabled = YES;
	// pagingEnabled property default is NO, if set the scroller will stop or snap at each photo
	// if you want free-flowing scroll, don't set this property.
	scrollView.pagingEnabled = YES; // Sub views should set each frame in scrollView.
    scrollView.contentSize = CGSizeMake(imageView.frame.size.width, imageView.frame.size.height);
    [scrollView addSubview:${1:(UIView *)}]; // add content

endsnippet

snippet djUIRandomColor  "UI - random color"
// Declare somewhere in your code
typedef struct _Color {
    CGFloat red, green, blue;
} Color;

static Color _colors[12] = {
    {237, 230, 4},  // Yellow just to the left of center
    {158, 209, 16}, // Next color clockwise (green)
    {80, 181, 23},
    {23, 144, 103},
    {71, 110, 175},
    {159, 73, 172},
    {204, 66, 162},
    {255, 59, 167},
    {255, 88, 0},
    {255, 129, 0},
    {254, 172, 0},
    {255, 204, 0}
};

- (UIColor *)randomColor {
    Color randomColor = _colors[arc4random_uniform(12)];
    return [UIColor colorWithRed:(randomColor.red / 255.0f) green:(randomColor.green / 255.0f) blue:(randomColor.blue / 255.0f) alpha:1.0f];
}

endsnippet

snippet jdCGDrawLayerToImage  "CG - draw layer to image"
    // convert layer to image
    // 1. get context with size
    UIGraphicsBeginImageContext(size);
    CGContextRef ctx = UIGraphicsGetCurrentContext();
    // 2. translate context
    CGContextTranslateCTM(ctx, offsetX, 0);
    // 3. rander layer
    [layer renderInContext:ctx];
    // 4. get image
    UIImage *snapShot = UIGraphicsGetImageFromCurrentImageContext();
    // 5. close context
    UIGraphicsEndImageContext();

endsnippet

snippet djUIPrepareforsegue  "UI - Prepare for Segue"
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    DebugLog(@"segue: %@", segue.identifier);
}

endsnippet

snippet URLSessionSimpleTask  "URLSession-SimpleTask"
    NSURLSession *session = [NSURLSession sharedSession];
    [[session dataTaskWithURL:[NSURL URLWithString:${1:URL}]
            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                NSLog(@"%@",data);
                
            }] resume];
endsnippet


snippet djNotifQueue  "NSNotification Queue"
    NSNotification *notif = [NSNotification notificationWithName:${1:name} object:self];
    // simply delay notif
    [[NSNotificationQueue defaultQueue] enqueueNotification:notif postingStyle:NSPostASAP];
    // delay notif and coalescing
    NSArray *modes = [NSArray arrayWithObject: NSEventTrackingRunLoopMode];
    [[NSNotificationQueue defaultQueue] enqueueNotification: notif
                                               postingStyle: NSPostWhenIdle
                                               coalesceMask: NSNotificationCoalescingOnName | NSNotificationCoalescingOnSender
                                                   forModes: modes];
     // del a notif from queue
    [[NSNotificationQueue defaultQueue] dequeueNotificationsMatching: notif
                                                        coalesceMask: NSNotificationCoalescingOnName | NSNotificationCoalescingOnSender];

endsnippet

snippet djCALayerAnimKeyDefine  "Anim - CALayer animation key define"
//边界rect
NSString * const kCALayerKeyBounds              = @"bounds";
//中心点point
NSString * const kCALayerKeyPosition            = @"position";
//四个角半径
NSString * const kCALayerKeyCornerRadius        = @"cornerRadius";
//layer显示的次序 integer
NSString * const kCALayerKeyZPosition           = @"zPosition";
//背景色
NSString * const kCALayerKeyBackgroundColor     = @"backgroundColor";
//边界颜色
NSString * const kCALayerKeyBorderColor         = @"borderColor";
//边界线宽
NSString * const kCALayerKeyBorderWidth         = @"borderWidth";
//阴影颜色
NSString * const kCALayerKeyShadowColor         = @"shadowColor";
//阴影偏移point
NSString * const kCALayerKeyShadowOffset        = @"shadowOffset";
//透明度（0-1）
NSString * const kCALayerKeyShadowOpacity       = @"shadowOpacity";
//阴影半径
NSString * const kCALayerKeyShaodwRadius        = @"shadowRadius";

//设置绕x，y，z方向旋转的弧度值（NSNumber）
NSString * const kCALayerKeyTransformRotationX      = @"transform.rotation.x";
NSString * const kCALayerKeyTransformRotationY      = @"transform.rotation.y";
NSString * const kCALayerKeyTransformRotationZ      = @"transform.rotation.z";
//该设置和ratation.z是功能是一样的
NSString * const kCALayerKeyTransformRotation       = @"transform.rotation";

//设置在x，y，z轴上缩放因子（NSNumber）
NSString * const kCALayerKeyTransformScaleX     = @"transform.scale.x";
NSString * const kCALayerKeyTransformScaleY     = @"transform.scale.y";
NSString * const kCALayerKeyTransformScaleZ     = @"transform.scale.z";
//三个缩放因子的平均值
NSString * const kCALayerKeyTransformScale      = @"transform.scale";

//设置x，y，z轴方向的平移因子（NSNumber）
NSString * const kCALayerKeyTransformTranslationX     = @"transform.translation.x";
NSString * const kCALayerKeyTransformTranslationY     = @"transform.translation.y";
NSString * const kCALayerKeyTransformTranslationZ     = @"transform.translation.z";
//设置x和y轴上的平移（包含NSSize或CGSize数据类型的NSValue）
NSString * const kCALayerKeyTransformTranslation      = @"transform.translation";

endsnippet

snippet djSampleLoadForApplaunch  "sample load for app launch"
// 模块内负责处理app启动后的初始化
+ (void)load {
    __block id observer =
    [[NSNotificationCenter defaultCenter]
     addObserverForName:UIApplicationDidFinishLaunchingNotification
     object:nil
     queue:nil
     usingBlock:^(NSNotification *note) {
         //[self setup]; 初始化
         [[NSNotificationCenter defaultCenter] removeObserver:observer];
     }];
}
endsnippet


snippet djUIButton  "UI - Button"
UIButton *button = [[UIButton alloc] initWithFrame:CGRectZero];
[button.titleLabel setFont:[UIFont fontWithName:@"iconfont" size:24]];
[button setTitle:@"${1:title}" forState:UIControlStateNormal];
[button setTitleColor:[UIColor ${2:color}] forState:UIControlStateNormal];
button.backgroundColor = [UIColor clearColor];
button.exclusiveTouch = YES;

//    UIEdgeInsets insets = UIEdgeInsetsMake(4.0f, 4.0f, 4.0f, 4.0f);
//    UIImage *bgImg = [[UIImage imageNamed:@"${3:?}"] resizableImageWithCapInsets:insets resizingMode:UIImageResizingModeStretch];
//    [button setBackgroundImage:bgImg forState:UIControlStateNormal];

//    button.layer.cornerRadius = 5.0f;
//    button.layer.borderColor = [UIColor lightGrayColor].CGColor;
//    button.layer.borderWidth = (1/[UIScreen mainScreen].scale);
//    button.layer.masksToBounds = YES;

[button addTarget:self action:@selector(${4:xxx}ButtonAction:) forControlEvents:UIControlEventTouchUpInside];
endsnippet

snippet djUIKeyboardEvent  "UI - UIKeyboard event"
- (void)registerKeyboardNotification{
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardDidShow:) name:UIKeyboardDidShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardDidHide:) name:UIKeyboardDidHideNotification object:nil];
    
    if (SYSTEM_VERSION >= 5.0) {
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillChange:) name:UIKeyboardWillChangeFrameNotification object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardDidChangeFrame:) name:UIKeyboardDidChangeFrameNotification object:nil];
    }
}

#pragma mark -
#pragma mark Responding to keyboard events
- (void)keyboardWillShow:(NSNotification *)notification {
    
    /*
     Reduce the size of the text view so that it's not obscured by the keyboard.
     Animate the resize so that it's in sync with the appearance of the keyboard.
     */
    
    NSDictionary *userInfo = [notification userInfo];
    
    // Get the origin of the keyboard when it's displayed.
    NSValue* aValue = [userInfo objectForKey:UIKeyboardFrameEndUserInfoKey];
    
    // Get the top of the keyboard as the y coordinate of its origin in self's view's coordinate system. The bottom of the text view's frame should align with the top of the keyboard's final position.
    CGRect keyboardRect = [aValue CGRectValue];
    
    // Get the duration of the animation.
    NSValue *animationDurationValue = [userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
    NSTimeInterval animationDuration;
    [animationDurationValue getValue:&animationDuration];
    
    // Animate the resize of the text view's frame in sync with the keyboard's appearance.
    [self moveInputBarWithKeyboardHeight:keyboardRect.size.height withDuration:animationDuration];
}


- (void)keyboardWillHide:(NSNotification *)notification {
    
    NSDictionary* userInfo = [notification userInfo];
    
    /*
     Restore the size of the text view (fill self's view).
     Animate the resize so that it's in sync with the disappearance of the keyboard.
     */
    NSValue *animationDurationValue = [userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
    NSTimeInterval animationDuration;
    [animationDurationValue getValue:&animationDuration];
    
    [self moveInputBarWithKeyboardHeight:0.0 withDuration:animationDuration];
}

endsnippet

snippet djUIPanGesture  "UI - pan gesture "
//    UIPanGestureRecognizer *panGesture = [[UIPanGestureRecognizer alloc]initWithTarget:self action:@selector(panGesture:)];
//    [self.view addGestureRecognizer:panGesture];

- (void)panGesture:(UIPanGestureRecognizer *)gesture {
    // x,y轴的位移，如不清零，得到的是总和
    CGPoint translation = [gesture translationInView:self.view];
    // x轴和y轴的移动速度(pixels/second)
    CGPoint velocity = [gesture velocityInView:self.view];
    NSLog(@"Translation:%@",NSStringFromCGPoint(translation));
    NSLog(@"Velocity:%@",NSStringFromCGPoint(velocity));
    
    ${1:code here}
    // 清零后，每次读取到的是两次调用此方法的差值
    [gesture setTranslation:CGPointZero inView:self.view];
}
#pragma mark UIGestureRecognizerDelegate Methods

// 控制活动方法和速度
// 下面只允许pan的水平滑动
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer
{
    if([gestureRecognizer isKindOfClass:[UIPanGestureRecognizer class]]) {
        //  We only want to register vertial pans
        UIPanGestureRecognizer *panGestureRecognizer = (UIPanGestureRecognizer *)gestureRecognizer;
        CGPoint velocity = [panGestureRecognizer velocityInView:self.container];
        return fabsf(velocity.y) > fabsf(velocity.x);
    }
    return YES;
}


- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer
{
    return YES;
}


endsnippet


snippet djFdLocalizedString  "Fd - localized string"
NSLocalizedString(@"${1:key}", @"${2:comment}");
endsnippet

snippet djFdObjectEqual  "Fd - is object equal"
// 比较两个同类型object方法
-(BOOL)isEqual:(id)object {
    return [[NSKeyedArchiver archivedDataWithRootObject:self] isEqualToData:[NSKeyedArchiver archivedDataWithRootObject:object]];
}


endsnippet

snippet djFdDocumentsPath  "Fd - documents directory path"
NSURL *documentURL = [NSURL URLWithString:[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]];

endsnippet

snippet URLSessionUploadData  "URLSession-upload data"
    // upload data
    NSMutableURLRequest *request = 
    [[NSMutableURLRequest alloc] initWithURL:${1:url}];
    [request setHTTPMethod:@"PUT"];
    NSData *imageData = UIImageJPEGRepresentation(image, 0.6); 
    NSURLSessionUploadTask *uploadTask =
    [upLoadSession uploadTaskWithRequest:request
                                fromData:imageData];
    [uploadTask resume];

endsnippet

snippet djMacroIgnoredDeprecated  "Macro - gcc ignored deprecated"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    ${1:ignored code here}
#pragma GCC diagnostic warning "-Wdeprecated-declarations"

endsnippet

snippet djUILineContainPoint  "UI - Line contain point"
- (BOOL)lineContainPoint:(CGPoint)p {
    // Find a line close to p
    CGPoint start = CGPointZero;
    CGPoint end = CGPointZero;
    
    // Check a few points on the line
    for (float t = 0.0; t <= 1.0; t += 0.05) {
        float x = start.x + t * (end.x - start.x);
        float y = start.y + t * (end.y - start.y);
        
        // If the tapped point is within 20 points, let's return this line
        if (hypot(x - p.x, y - p.y) < 20.0) {
            return YES;
        }
    }
    return NO;
}
endsnippet


snippet djFdNibClassMethod  "Fd - class method nib"
+ (UINib *)nib
{
    return [UINib nibWithNibName:@"PhotoCell" bundle:nil];
}

endsnippet

