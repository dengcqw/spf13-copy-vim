
########## { Redux } ##########

snippet rdCreateStore "redux create store with enhancer, saga, rxjs" b
import 'rxjs'
import { createStore, applyMiddleware, compose } from 'redux'
import {createSagaMiddleware, sagaMonitor} from 'redux-saga'
import { createEpicMiddleware } from 'redux-observable'
//import DevTools from 'redux-devtools' /* tools like chrome extension */

import rootReducer from './reducers'
import rootSaga from './sagas'
import rootEpic from './epics'

let sagaOptions =  {}
if (process.env.NODE_ENV !== 'production') {
  sagaOptions = {sagaMonitor}
}

const sagaMiddleware = createSagaMiddleware(sagaOptions)
const epicMiddleware = createEpicMiddleware(rootEpic);
const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;

const store = createStore(
  rootReducer,
  composeEnhancers( /* if only Middleware, not need compose */
    applyMiddleware(
      epicMiddleware,
      sagaMiddleware,
    ),
    //DevTools.instrument()
  )
)
sagaMiddleware.run(rootSaga)
endsnippet

snippet rdCombine "redux combine reducers" b
import { combineReducers } from 'redux'
import todos from './todos'
import counter from './counter'

export default combineReducers({
  todos,
  counter
})
endsnippet

snippet rdConnect "redex connect export component" b
import { connect } from 'react-redux'
const mapStateToProps = (state) => ({
  ${1:xxx}: state.$1
})
const mapDispatchToProps = (dispatch) => {
  return {
    todoActions: bindActionCreators(todoActionCreators, dispatch)
  }
}
export default connect(mapStateToProps, mapDispatchToProps)(${2:component})
endsnippet

snippet rcConnect-bind "map state and map dispatch" b
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux';
import * as ${2:xxx}Actions from '../actions/$2Actions';
export default connect((state) => ({
  ${1:xxx}: state.$1
}),
(dispatch) => ({
  actions: bindActionCreators($2Actions, dispatch)
})
)(${3:component})
endsnippet

snippet rdAction "action creator" b
export function ${1:action}(${2:param}) {
  return {
    type: "com.tvguor.$1",
    $2
  }
}
endsnippet

snippet rdActionAsync "create async redux action" b
export function ${1:action}(${2:param}) {
  return (dispatch, getState) => {
    const { ${3:theProps }} = getState()
    /* ${4:do something here} */
    dispatch(${5:anotherAction}())
  }
}
endsnippet

snippet rdReducerFileTemplate "redux reducer file template" b
// all types defined in one file and export seperately
import ${1:xxxTypes} from '../actions/actionTypes'

const initialState = {
}

export default function ${1:named}Reducer(state = initialState, action = {}) {
  switch (action.type) {
    case $1.type:
      // cover one state
      return {
        ...state,
        ${2:aState}: action.$2
      }
    case $1:type:
      // create new state obj
      return Object.assign({} , {
      })
    default:
      return state;
  }
}
endsnippet

snippet rdMiddlewareDemo "redux how to create a middleware" b
const $(1:named)Middleware = function ({ dispatch, getState }) {
  // console.log('Enter ${1}Middleware');
  return function(next) {
    // console.log('Function "next" provided:', next);
    return function (action) {
      // console.log('Handling action:', action);
      return typeof action === 'function' ?
        action(dispatch, getState) :
        next(action)
    }
  }
}

function logMiddleware ({ dispatch, getState }) {
  return function(next) {
    return function (action) {
      console.log('logMiddleware action received:', action)
      return next(action)
    }
  }
}
endsnippet

snippet rdPromissMiddleware "redux promiss Middleware" b
export default function promiseMiddleware() {
  return (next) => (action) => {
    const { promise, types, ...rest } = action

    if (!promise) {
      return next(action)
    }

    const [REQUEST, SUCCESS, FAILURE] = types

    next({...rest, type: REQUEST})

    return promise().then(
      (result) => {
        next({...rest, result, type: SUCCESS})
      },
      (error) => {
        next({...rest, error, type: FAILURE})
      }
    )
  }
}
endsnippet

snippet rdReducer "redux create reducer" b
export function ${1:xxxReducer}(state, action) {
  switch (action.type) {
    case DECREMENT:
      return state - 1
    case INCREMENT:
      return state + 1
    default:
      return state
  }
}
endsnippet

snippet rdHighOrderReducerDemo "redux reducer demo" b
inputReducer = function(state={}, action) {
  if (action.type === 'ON_CHANGE') {
    return {
      ...state,
      [action.field]: action.value
    };
  }
  return state;
}

formReducer = function(state={}, action) {
  const { form, ...rest } = action;
  if (form) {
    return {
      ...state,
      [form]: inputReducer(state[form], rest)
    };
  }

  return state
}

inputOnChangeAction = function(form, field, value) {
  return {
    type: 'ON_CHANGE', form, field, value
  };
}
endsnippet

snippet rdHighOrderReducerDemo_1 "redux reducer demo" b
function list(reducer, actionTypes) {
  return function (state = [], action) {
    switch (action.type) {
    case actionTypes.add:
      return [...state, reducer(undefined, action)];
    case actionTypes.remove:
      return [...state.slice(0, action.index), ...state.slice(action.index + 1)];
    default:
      const { index, ...rest } = action;
      if (typeof index !== 'undefined') {
        return state.map(item => reducer(item, rest));
      }
      return state;
    }
  }
}

function counter(state = 0, action) {
  switch (action.type) {
  case 'INCREMENT':
    return counter + 1;
  case 'DECREMENT':
    return counter - 1;
  }
}

const listOfCounters = list(counter, {
  add: 'ADD_COUNTER',
  remove: 'REMOVE_COUNTER'
});

const store = createStore(listOfCounters);
store.dispatch({
  type: 'ADD_COUNTER'
});
store.dispatch({
  type: 'INCREMENT',
  index: 0
});

const reducer = combineReducers({
  counterList: list(counter, {
    add: 'ADD_COUNTER',
    remove: 'REMOVE_COUNTER'
  }),
  todoList: list(counter, {
    add: 'ADD_TODO',
    remove: 'REMOVE_TODO'
  }),
});
endsnippet

snippet rdProvider "react-redux Provider" b
<Provider store={store}>
    <App />
</Provider>
endsnippet

snippet rdWrapFunction "wrap function" b
export default function wrapDispatch(dispatch, reducerKey) {
  const wrappedDispatch = (action) => {
    let wrappedAction;
    if (typeof action === 'function') {
      wrappedAction = (_, getState) => action(wrappedDispatch, getState);
    } else if (typeof action === 'object') {
      wrappedAction = wrapAction(action, reducerKey);
    }
    return dispatch(wrappedAction);
  };

  return wrappedDispatch;
}
endsnippet

snippet rdWrapObject "wrap object" b
export default function wrapAction(action, reducerKey) {
  return {
    ...action,
    meta: {
      ...action.meta,
      [key]: reducerKey,
    }
  };
}
endsnippet

snippet rdUseHooks "useXXX" b
import {useSelector, useDispatch} from 'react-redux';
const todo = useSelector(state => state.todo));
const dispatch = useDispatch();
endsnippet

snippet rdSlice "createSlice template" b
import { createSlice } from '@reduxjs/toolkit'

const ${1:todos}Slice = createSlice({
  name: '${1:todos}',
  initialState: [],
  reducers: {
    todoToggled: (state, action) => {
    }
  }
})

export const { todoAdded, todoToggled } = ${1:todos}Slice.actions
export default ${1:todos}Slice.reducer
endsnippet
